<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JAS0NHUANG - Diary</title>
  
  <subtitle>Diary, Daily Progress and Bazzar</subtitle>
  <link href="/diary/atom.xml" rel="self"/>
  
  <link href="http://JAS0NHUANG.github.io/diary/"/>
  <updated>2020-06-18T19:16:52.739Z</updated>
  <id>http://JAS0NHUANG.github.io/diary/</id>
  
  <author>
    <name>JAS0N HUANG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>J+6 [進度] 複習 [ALG101]，玩玩 HTTP、API</title>
    <link href="http://JAS0NHUANG.github.io/diary/J-plus-6-progress/"/>
    <id>http://JAS0NHUANG.github.io/diary/J-plus-6-progress/</id>
    <published>2020-06-18T19:16:52.000Z</published>
    <updated>2020-06-18T19:16:52.739Z</updated>
    
    <content type="html"><![CDATA[<h2 id="昨日小記"><a href="#昨日小記" class="headerlink" title="昨日小記"></a>昨日小記</h2><h3 id="再走一次迷宮"><a href="#再走一次迷宮" class="headerlink" title="再走一次迷宮"></a>再走一次迷宮</h3><p>把 LIOJ 1053 迷宮再走一次，其實就還是在默寫，先學著把模仿做好囉！<br>但是其中遇到一個神奇的地方，就是最後在判斷是否為未走過的點以及原始點（老師說的 A 點）到前往點（老師說的 B 點）的距離比較那裡。<br>我第一次不知道腦子進了什麼東西，寫出來變這樣，明顯就是錯誤（不相關）的判斷：  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (stepsArr[newX][newY] &gt; stepsArr[x][y] + stepsArr[newX][newY] || stepsArr[newX][newY] !== <span class="literal">undefined</span>) <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>但是居然 AC！<br>仔細又看了一次老師的解法，發現好像沒有去判斷 A 走到 B 點的距離也沒關係，所以就試著把那一部分刪了，變成：  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (stepsArr[newX][newY] !== <span class="literal">undefined</span>) <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>也還是 AC。XD<br>我自已的感覺是，其實只要判斷是否有走過就可以了？！或者是測資還不夠強，遇到更複雜的迷宮就可能會算錯？！</p><hr><h2 id="今日進度"><a href="#今日進度" class="headerlink" title="今日進度"></a>今日進度</h2><h3 id="快速複習-ALG101-先別急著寫-leetcode-單元-5"><a href="#快速複習-ALG101-先別急著寫-leetcode-單元-5" class="headerlink" title="快速複習 [ALG101] 先別急著寫 leetcode 單元 5"></a>快速複習 [ALG101] 先別急著寫 leetcode 單元 5</h3><ul><li><input checked="" disabled="" type="checkbox"> [ALG101] 先別急著寫 leetcode 單元 5<br>決定先看一半，其它時間學新的東西。  </li></ul><h3 id="看-NET201-HTTP-協定"><a href="#看-NET201-HTTP-協定" class="headerlink" title="看 [NET201] HTTP 協定"></a>看 [NET201] HTTP 協定</h3><ul><li><input disabled="" type="checkbox"> [NET201] HTTP 協定<br>仔細看完影片並做筆記。  </li></ul><h3 id="玩一下-API"><a href="#玩一下-API" class="headerlink" title="玩一下 API"></a>玩一下 API</h3><ul><li><input checked="" disabled="" type="checkbox"> 玩一下第四週作業裡的 API<br>其實就是很快的瀏覽了一次 [NET201] 的影片，介紹到 API 實作的時候覺得蠻有趣的，然後看到第四週作業的內容就不小心玩了一下，第四週的前兩個作業解的差不多了……<br>上 npm 找 request 這個套件的介紹時，看到它上面大大的紅字 “<a href="https://www.npmjs.com/package/request" target="_blank" rel="noopener">This package has been deprecated</a>“，看了一下 <a href="https://github.com/request/request/issues/3142" target="_blank" rel="noopener">issue #3142</a> 還有推薦的替代方案：<a href="https://github.com/request/request/issues/3143" target="_blank" rel="noopener">#3143</a>，發現 axios 這個名字好像最近很常在網路上看到，就想說自已研究看看了。<br>有興趣的人可以到我 week4 分支的 <a href="https://github.com/Lidemy/mentor-program-4th-JAS0NHUANG/tree/week4/homeworks/week4" target="_blank" rel="noopener">week4</a> 裡看一下，給我一點意見…… （我好像是從 week2 分支切過去的，所以 repo 有點亂，反正到時候 week4 應該會再重開一個分支）  </li></ul><hr><h2 id="明日進度"><a href="#明日進度" class="headerlink" title="明日進度"></a>明日進度</h2><h3 id="快速複習-ALG101-先別急著寫-leetcode-單元-6"><a href="#快速複習-ALG101-先別急著寫-leetcode-單元-6" class="headerlink" title="快速複習 [ALG101] 先別急著寫 leetcode 單元 6"></a>快速複習 [ALG101] 先別急著寫 leetcode 單元 6</h3><ul><li><input disabled="" type="checkbox"> [ALG101] 先別急著寫 leetcode 單元 5<br>把 [ALG101] 單元 5、6 分四天（或更多天）看吧！以免有倦怠感……<br>也讓自已每天回憶一點 JavaScript。  </li></ul><h3 id="看-NET201-TCP-IP"><a href="#看-NET201-TCP-IP" class="headerlink" title="看 [NET201] TCP/IP"></a>看 [NET201] TCP/IP</h3><ul><li><input disabled="" type="checkbox"> [NET201] TCP/IP  </li></ul><hr><h2 id="未來計畫"><a href="#未來計畫" class="headerlink" title="未來計畫"></a>未來計畫</h2><h3 id="按照課程進度前進"><a href="#按照課程進度前進" class="headerlink" title="按照課程進度前進"></a>按照課程進度前進</h3><h3 id="將-JS101-練習-Lv2-與-Lv3-做完"><a href="#將-JS101-練習-Lv2-與-Lv3-做完" class="headerlink" title="將 [JS101] 練習 Lv2 與 Lv3 做完"></a>將 [JS101] 練習 Lv2 與 Lv3 做完</h3><ul><li><input disabled="" type="checkbox"> [JS101] 練習 Lv2 與 Lv3 做完<br>很多都跟作業、[ALG101] 的內容重覆了，大概看一下講解影片看看有沒有什麼我沒有想到的地方。有時間再慢慢做。  </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;昨日小記&quot;&gt;&lt;a href=&quot;#昨日小記&quot; class=&quot;headerlink&quot; title=&quot;昨日小記&quot;&gt;&lt;/a&gt;昨日小記&lt;/h2&gt;&lt;h3 id=&quot;再走一次迷宮&quot;&gt;&lt;a href=&quot;#再走一次迷宮&quot; class=&quot;headerlink&quot; title=&quot;再走一次迷
      
    
    </summary>
    
    
      <category term="每日進度" scheme="http://JAS0NHUANG.github.io/diary/tags/%E6%AF%8F%E6%97%A5%E9%80%B2%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>J+5 [筆記] 再走一次迷宮</title>
    <link href="http://JAS0NHUANG.github.io/diary/J-plus-5-mazerun-again/"/>
    <id>http://JAS0NHUANG.github.io/diary/J-plus-5-mazerun-again/</id>
    <published>2020-06-17T20:55:39.000Z</published>
    <updated>2020-06-17T20:55:39.978Z</updated>
    
    <content type="html"><![CDATA[<p>再試一次自已把走迷宮寫出來，然後一步一步記錄想法，建議沒有自已想過，或者沒有看著老師的解法仔細想過的同學先不要看。<br>然後我把所有自已測試時用到的 <code>console.log()</code> 都留下來了，當作一個思考過程的記錄</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">solve([</span><br><span class="line">  &#39;3 3&#39;, &#x2F;&#x2F; 迷宮高與寬（先高、後寬）</span><br><span class="line">  &#39;...&#39;, &#x2F;&#x2F; 迷宮圖樣</span><br><span class="line">  &#39;...&#39;,</span><br><span class="line">  &#39;...&#39;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">function solve(lines) &#123;</span><br><span class="line">  &#x2F;&#x2F; 將高、寬轉換為數字存入陣列</span><br><span class="line">  const HWArray &#x3D; lines[0].split(&#39; &#39;)</span><br><span class="line">  &#x2F;&#x2F; console.log(HWArray)</span><br><span class="line">  &#x2F;&#x2F; 分別取出高 H、寬 W</span><br><span class="line">  const H &#x3D; Number(HWArray[0])</span><br><span class="line">  const W &#x3D; Number(HWArray[1])</span><br><span class="line">  &#x2F;&#x2F; 將迷宮存入陣列</span><br><span class="line">  const maze &#x3D; []</span><br><span class="line">  for (let i &#x3D; 1; i &lt; lines.length; i++) &#123;</span><br><span class="line">    maze.push(lines[i])</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; console.log(maze)</span><br><span class="line">  &#x2F;&#x2F; 計算出終點</span><br><span class="line">  const endX &#x3D; H - 1</span><br><span class="line">  const endY &#x3D; W - 1</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 設定一個空陣列等一下用來儲存走到每個點的步數</span><br><span class="line">  let stepsArr &#x3D; []</span><br><span class="line">  &#x2F;&#x2F; 先在這個空陣列裡面填入與高度同數量的空陣列</span><br><span class="line">  for (let i &#x3D; 1; i &lt; H + 1; i++) &#123;</span><br><span class="line">    stepsArr.push([ ])</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 設定起點（0, 0）到起點的步數為 0</span><br><span class="line">  stepsArr[0][0] &#x3D; 0</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 設定一個列隊，用來存入可以走的點，起始設定為起點： 0, 0</span><br><span class="line">  let pointQueue &#x3D; [&#123;x:0, y:0&#125;]</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 設定一個向四個方向走的陣列</span><br><span class="line">  const directions &#x3D; [</span><br><span class="line">    &#123; &quot;dx&quot;: 0, &quot;dy&quot;: 1&#125;,</span><br><span class="line">    &#123; &quot;dx&quot;: 1, &quot;dy&quot;: 0&#125;,</span><br><span class="line">    &#123; &quot;dx&quot;: 0, &quot;dy&quot;: -1&#125;,</span><br><span class="line">    &#123; &quot;dx&quot;: -1, &quot;dy&quot;: 0&#125;</span><br><span class="line">  ]</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F; 開始走迷宮</span><br><span class="line">  &#x2F;&#x2F; 只要列隊中還有未走過的點就執行以下運算</span><br><span class="line">  while (pointQueue.length) &#123;</span><br><span class="line">    &#x2F;&#x2F; 先取出目前所在的點，然後從 pointQueue 列隊中刪除</span><br><span class="line">    let currentPoint &#x3D; pointQueue.shift()</span><br><span class="line">    let x &#x3D; currentPoint.x</span><br><span class="line">    let y &#x3D; currentPoint.y</span><br><span class="line">    &#x2F;&#x2F; console.log(x, y)</span><br><span class="line">    &#x2F;&#x2F; 往四個方向走，進行判斷</span><br><span class="line">    for (let i &#x3D; 0; i &lt; directions.length; i++) &#123;</span><br><span class="line">      &#x2F;&#x2F; console.log(directions[i].dx)</span><br><span class="line">      let newX &#x3D; x + directions[i].dx</span><br><span class="line">      let newY &#x3D; y + directions[i].dy</span><br><span class="line">      &#x2F;&#x2F; 判斷條件：</span><br><span class="line">      &#x2F;&#x2F; 超過邊界或者路不能走</span><br><span class="line">      if (newX &lt; 0 || newY &lt; 0 || newX &gt; endX || newY &gt; endY || maze[newX][newY] !&#x3D;&#x3D; &#39;.&#39;) continue</span><br><span class="line">      &#x2F;&#x2F; 要走的點的步數大於原始點加上 1 步或者不是未走過的路</span><br><span class="line">      if (stepsArr[newX][newY] &lt;&#x3D; stepsArr[x][y] + 1 || stepsArr[newX][newY] !&#x3D;&#x3D; undefined) continue</span><br><span class="line">      &#x2F;&#x2F; 通過以上判斷則為要走的點。</span><br><span class="line">      &#x2F;&#x2F; 將到達原始點的步數加上 1 步，放入儲存步數的陣列中 stepsArr[newX][newY]</span><br><span class="line">      stepsArr[newX][newY] &#x3D; stepsArr[x][y] + 1</span><br><span class="line">      &#x2F;&#x2F; 將可以走的點加入列隊，等待成為之後的起始點。（列隊中可以同時有好幾個點）</span><br><span class="line">      pointQueue.push(&#123;x:newX, y:newY&#125;)</span><br><span class="line">      &#x2F;&#x2F; console.log(pointQueue)</span><br><span class="line">      &#x2F;&#x2F; console.log(&#96;newX and newY: $&#123;newX&#125; : $&#123;newY&#125;&#96;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; console.log(stepsArr)</span><br><span class="line">  console.log(stepsArr[endX][endY])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其實就是把老師的解法從自已的記憶裡挖出來然後寫出來這樣。</p><p>其中有一個地方很神奇，就是最後在判斷是否為未走過的點以及原始點（老師說的 A 點）到前往點（老師說的 B 點）的距離比較那裡。<br>我第一次不知道腦子進了什麼東西，寫出來變這樣，明顯就是錯誤（不相關）的判斷：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (stepsArr[newX][newY] &gt; stepsArr[x][y] + stepsArr[newX][newY] || stepsArr[newX][newY] !&#x3D;&#x3D; undefined) continue</span><br></pre></td></tr></table></figure><p>但是居然 AC！<br>仔細又看了一次老師的解法，發現好像沒有去判斷 A 走到 B 點的距離也沒關係，所以就試著把那一部分刪了，變成：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (stepsArr[newX][newY] !&#x3D;&#x3D; undefined) continue</span><br></pre></td></tr></table></figure><p>也還是 AC。XD<br>我自已的感覺是，其實只要判斷是否有走過就可以了？！或者是測資還不夠強，遇到更複雜的迷宮就可能會算錯？！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;再試一次自已把走迷宮寫出來，然後一步一步記錄想法，建議沒有自已想過，或者沒有看著老師的解法仔細想過的同學先不要看。&lt;br&gt;然後我把所有自已測試時用到的 &lt;code&gt;console.log()&lt;/code&gt; 都留下來了，當作一個思考過程的記錄&lt;/p&gt;
&lt;figure clas
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://JAS0NHUANG.github.io/diary/tags/JavaScript/"/>
    
      <category term="BFS" scheme="http://JAS0NHUANG.github.io/diary/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>J+5 [進度] week2 超級挑戰、ES6、傳紙條</title>
    <link href="http://JAS0NHUANG.github.io/diary/J-plus-5-progress/"/>
    <id>http://JAS0NHUANG.github.io/diary/J-plus-5-progress/</id>
    <published>2020-06-17T14:27:46.000Z</published>
    <updated>2020-06-17T20:54:56.339Z</updated>
    
    <content type="html"><![CDATA[<h2 id="復習-預習"><a href="#復習-預習" class="headerlink" title="復習 + 預習"></a>復習 + 預習</h2><p>因為第二、三週程式基礎大都是在復習，雖然也不一定每一個細節都敢說是完全掌握了，但是一直復習感覺還是會比較無聊一點，所以接下來這一週應該每天都會有一半時間復習程式基礎，然後另一半的時間接著看之後的課程。</p><hr><h2 id="今日進度"><a href="#今日進度" class="headerlink" title="今日進度"></a>今日進度</h2><h3 id="重做-week2-超級挑戰題"><a href="#重做-week2-超級挑戰題" class="headerlink" title="重做 week2 超級挑戰題"></a>重做 week2 超級挑戰題</h3><ul><li><input disabled="" type="checkbox"> 重做 week2 超級挑戰題<br>試著自已再寫一次超級挑戰題。</li></ul><h3 id="看-JS102-升級你的-JavaScript-技能：ES6-npm-Jest"><a href="#看-JS102-升級你的-JavaScript-技能：ES6-npm-Jest" class="headerlink" title="看 [JS102] 升級你的 JavaScript 技能：ES6 + npm + Jest"></a>看 [JS102] 升級你的 JavaScript 技能：ES6 + npm + Jest</h3><ul><li><input checked="" disabled="" type="checkbox"> 看 [JS102] 升級你的 JavaScript 技能：ES6 + npm + Jest<br>昨天看完 npm 以及 Jest 的部分，今天看完 ES6 的部分。</li></ul><h3 id="看-NET201-傳紙條部分"><a href="#看-NET201-傳紙條部分" class="headerlink" title="看 [NET201] 傳紙條部分"></a>看 [NET201] 傳紙條部分</h3><ul><li><input disabled="" type="checkbox"> [NET201] 傳紙條部分<br>然後看老師的兩篇文章：<a href="https://medium.com/@hulitw/ramen-and-api-6238437dc544" target="_blank" rel="noopener">從拉麵店的販賣機理解什麼是 API</a>、<a href="https://medium.com/@hulitw/learning-tcp-ip-http-via-sending-letter-5d3299203660" target="_blank" rel="noopener">從傳紙條輕鬆學習基本網路概念</a><br>作筆記！</li></ul><hr><h2 id="明日進度"><a href="#明日進度" class="headerlink" title="明日進度"></a>明日進度</h2><h3 id="快速複習-ALG101-先別急著寫-leetcode-單元-5"><a href="#快速複習-ALG101-先別急著寫-leetcode-單元-5" class="headerlink" title="快速複習 [ALG101] 先別急著寫 leetcode 單元 5"></a>快速複習 [ALG101] 先別急著寫 leetcode 單元 5</h3><ul><li><input disabled="" type="checkbox"> [ALG101] 先別急著寫 leetcode 單元 5</li></ul><h3 id="看-NET201-HTTP-協定"><a href="#看-NET201-HTTP-協定" class="headerlink" title="看 [NET201] HTTP 協定"></a>看 [NET201] HTTP 協定</h3><ul><li><input disabled="" type="checkbox"> [NET201] HTTP 協定</li></ul><hr><h2 id="後天與未來計畫"><a href="#後天與未來計畫" class="headerlink" title="後天與未來計畫"></a>後天與未來計畫</h2><h3 id="快速複習-ALG101-先別急著寫-leetcode-單元-6"><a href="#快速複習-ALG101-先別急著寫-leetcode-單元-6" class="headerlink" title="快速複習 [ALG101] 先別急著寫 leetcode 單元 6"></a>快速複習 [ALG101] 先別急著寫 leetcode 單元 6</h3><ul><li><input disabled="" type="checkbox"> [ALG101] 先別急著寫 leetcode 單元 6<br>把 [ALG101] 單元 5、6 分兩天看，以免有倦怠感……</li></ul><h3 id="看-NET201-TCP-IP"><a href="#看-NET201-TCP-IP" class="headerlink" title="看 [NET201] TCP/IP"></a>看 [NET201] TCP/IP</h3><ul><li><input disabled="" type="checkbox"> [NET201] TCP/IP</li></ul><h3 id="將-JS101-練習-Lv2-與-Lv3-做完"><a href="#將-JS101-練習-Lv2-與-Lv3-做完" class="headerlink" title="將 [JS101] 練習 Lv2 與 Lv3 做完"></a>將 [JS101] 練習 Lv2 與 Lv3 做完</h3><ul><li><input disabled="" type="checkbox"> [JS101] 練習 Lv2 與 Lv3 做完<br>很多都跟作業、[ALG101] 的內容重覆了，大概看一下講解影片看看有沒有什麼我沒有想到的地方。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;復習-預習&quot;&gt;&lt;a href=&quot;#復習-預習&quot; class=&quot;headerlink&quot; title=&quot;復習 + 預習&quot;&gt;&lt;/a&gt;復習 + 預習&lt;/h2&gt;&lt;p&gt;因為第二、三週程式基礎大都是在復習，雖然也不一定每一個細節都敢說是完全掌握了，但是一直復習感覺還是會比較無聊
      
    
    </summary>
    
    
      <category term="每日進度" scheme="http://JAS0NHUANG.github.io/diary/tags/%E6%AF%8F%E6%97%A5%E9%80%B2%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>J+4 [筆記] Jest</title>
    <link href="http://JAS0NHUANG.github.io/diary/J-plus-4-note-jest/"/>
    <id>http://JAS0NHUANG.github.io/diary/J-plus-4-note-jest/</id>
    <published>2020-06-17T14:19:03.000Z</published>
    <updated>2020-06-17T14:19:03.309Z</updated>
    
    <content type="html"><![CDATA[<h2 id="土炮測試"><a href="#土炮測試" class="headerlink" title="土炮測試"></a>土炮測試</h2><p>log 爆了你！  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(theFunction())</span><br><span class="line">console.log(theFunction() &#x3D;&#x3D;&#x3D; &#39;XXXX&#39;)</span><br></pre></td></tr></table></figure><p>缺點就是沒辦法規模化、不好執行。</p><h2 id="Jest-大神幫你測"><a href="#Jest-大神幫你測" class="headerlink" title="Jest 大神幫你測"></a>Jest 大神幫你測</h2><p><a href="https://jestjs.io/" target="_blank" rel="noopener">JEST</a></p><ul><li>安裝 <code>yarn add --dev jest</code>。</li><li>基本使用方法：<ol><li>先把想要測試的程式 <code>export</code> 出來：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 想被測的程式.js</span><br><span class="line">function 兩倍(x)&#123;</span><br><span class="line">  return x * 2</span><br><span class="line">&#125;</span><br><span class="line">module.exports &#x3D; 兩倍</span><br></pre></td></tr></table></figure></li><li>建立一個測試檔，引入想測試的程式：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 測試.test.js</span><br><span class="line">var 兩倍 &#x3D; require(&#39;.&#x2F;想被測的程式&#39;)</span><br></pre></td></tr></table></figure></li><li>然後寫測試：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test(&#39;這裡你想打什麼就打什麼，例如：&quot;5 的兩倍是 10&quot;&#39;， function () &#123;</span><br><span class="line">  &#x2F;&#x2F; 測試資料與預期結果</span><br><span class="line">  expect(兩倍(5)).toBe(10)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>然後跑起來！  <ol><li><code>./node_modules/jest/bin/jest.js</code>。</li><li>在 package.json 檔案裡加一個 script：<code>&quot;test&quot;:&quot;jest&quot;</code>，然後 <code>npm run test</code>。</li><li>如果 npm 版本夠新，也可以用 <code>npx jest</code>。<br>Jest 會自已去找所有 .test.js 的檔案來進行測試。當然也可以指定單一檔案測試。</li></ol></li></ol></li></ul><ul><li>加一個 describe 包住其它測試資料, 可以讓同一個函式的所有測試被放到同一個群組裡<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">describe(&#39;測試 兩倍&#39;, function() &#123;</span><br><span class="line">  test(&#39;這裡你想打什麼就打什麼&#39;， function () &#123;</span><br><span class="line">    &#x2F;&#x2F; 測試資料與預期結果</span><br><span class="line">    expect(兩倍(5)).toBe(10)</span><br><span class="line">  &#125;)</span><br><span class="line">  test(&#39;這裡你想打什麼就打什麼&#39;， function () &#123;</span><br><span class="line">    &#x2F;&#x2F; 測試資料與預期結果</span><br><span class="line">    expect(兩倍(9)).toBe(18)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="TDD-測試驅動開發"><a href="#TDD-測試驅動開發" class="headerlink" title="TDD 測試驅動開發"></a>TDD 測試驅動開發</h2>先寫測試再寫程式。<br>其實就是把一般先寫程式再測試的方法倒過來，之後寫新的 project 的時候可以試試看。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;土炮測試&quot;&gt;&lt;a href=&quot;#土炮測試&quot; class=&quot;headerlink&quot; title=&quot;土炮測試&quot;&gt;&lt;/a&gt;土炮測試&lt;/h2&gt;&lt;p&gt;log 爆了你！  &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://JAS0NHUANG.github.io/diary/tags/JavaScript/"/>
    
      <category term="Jest" scheme="http://JAS0NHUANG.github.io/diary/tags/Jest/"/>
    
      <category term="Test" scheme="http://JAS0NHUANG.github.io/diary/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>J+4 [筆記] 模組、套件與 npm</title>
    <link href="http://JAS0NHUANG.github.io/diary/J-plus-4-note-package/"/>
    <id>http://JAS0NHUANG.github.io/diary/J-plus-4-note-package/</id>
    <published>2020-06-16T14:55:05.000Z</published>
    <updated>2020-06-16T15:00:28.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模組化"><a href="#模組化" class="headerlink" title="模組化"></a>模組化</h2><ul><li>require 用別人的模組<br>將不同功能切開，分別寫在不同檔案裡。<br>列如 node 就有提供很多寫好的模組，如：os、readline、fs、https……等等。<br>引入方法，使用 <code>require</code> 關鍵字：  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var os &#x3D; require(&#39;os&#39;) &#x2F;&#x2F; 引入模組並存入 os 這個變數中</span><br><span class="line">console.log(os.platform())</span><br></pre></td></tr></table></figure></li><li>exports 建立自已的模組<br>建立自已的模組讓別人/或自已可以使用，使用 <code>module.exports</code> 關鍵字  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 檔名為 abcde</span><br><span class="line">function abc(x) &#123;</span><br><span class="line">  return x</span><br><span class="line">&#125;</span><br><span class="line">module.exports &#x3D; abc</span><br></pre></td></tr></table></figure>然後想要在同一個資料夾裡的另一個程式裡使用的話一樣是用 require，但是引入的必需是檔案名稱，而不是函數名稱：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var abc &#x3D; require(&#39;.&#x2F;abcde&#39;)</span><br><span class="line">console.log(abc(&#39;hello&#39;))</span><br></pre></td></tr></table></figure></li><li>輸出多個模組<br>同一個檔案可以輸出多個模組，但是必需以單一物件 export（不然只會輸出最後一個模組），例如：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 檔名為 utils.js</span><br><span class="line">function double (x) &#123;</span><br><span class="line">  return x * 2</span><br><span class="line">&#125;</span><br><span class="line">function triple (y) &#123;</span><br><span class="line">  return y * 3</span><br><span class="line">&#125;</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  double: double,</span><br><span class="line">  triple: triple</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><p>或者也可以寫成：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; exports 初始會被視為空物件</span><br><span class="line">exports.double &#x3D; double</span><br><span class="line">exports triple &#x3D; triple</span><br></pre></td></tr></table></figure><p>引入時可以作為方法使用：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var utils &#x3D; require(&#39;.&#x2F;utils&#39;）</span><br><span class="line">utils.double(22)</span><br><span class="line">utils.triple(33)</span><br></pre></td></tr></table></figure><h2 id="npm-大神們寫的模組-套件"><a href="#npm-大神們寫的模組-套件" class="headerlink" title="npm 大神們寫的模組/套件"></a>npm 大神們寫的模組/套件</h2><p>library、package、module 三個相近的概念，有時候其實指的也是同一個東西。</p><ol><li>拿 left-pad 來試試<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install left-pad</span><br></pre></td></tr></table></figure>安裝 left-pad（其實就是在同一個資料夾建立一個 <code>node_modules/</code> 資料夾，然後從 npm 的程式庫裡把 <code>left-pad</code> 這個套件抓下來，放到 <code>node_modules/</code> 資料夾內）<br>然後就可以 <code>var LP = require(&#39;left-pad&#39;)</code> 使用它了。</li></ol><ul><li>如果還沒有執行過，<code>npm init</code> 的話，因為資料夾內還沒有 <code>package.json</code> 檔案，所以這時候安裝的套件都不會被記錄到相依性裡頭。</li><li>但是只要一執行 <code>npm init</code>（不論是安裝套件之前還是之後），npm 預設都會把安裝的套件記錄到相依性裡（–save）。<br>這個相依關係有一個很實用的地方就是大家在分享自已的專案時不用分享 <code>node_modules</code> 資料夾內的套件，只要有 <code>package.json</code> 檔，在任何電腦上執行 <code>npm install</code> npm 就會自動把相依的套件都抓下來了。</li><li><code>--save</code> 選項是記錄到相依套件，<code>--save-dev</code> 則會記錄到「開發環境」的相依關係裡。<br>（看 <code>left-pad</code> 事件看了一個多小時，網路真的很恐怖，連出去就抓不回來了……）</li></ul><ol start="2"><li><p>npm scripts<br>在 <code>package.json</code> 檔案裡可以看到：<code>&quot;scripts&quot;:{}</code> 這個區塊，就是讓你寫 scripts 的地方啦！<br>這個 json 物件裡的 key 就是你想要在這個 node 專案裡設定的一個指令，value 就是下了這個指令後會執行的步驟。例如：設定 <code>&quot;start&quot;: &quot;node index.js&quot;</code> 那麼在這個專案資料夾裡執行 <code>npm run start</code>（必需要加 <code>npm run</code> 在指令之前）的時候，npm 就會自動執行 <code>node index.js</code> 這個指令。</p></li><li><p>還有 yarn<br>其實就是另一個管理套件的程式，跟 npm 不止 87 分像，基本指令對照 npm：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn -v &#x3D;&#x3D; npm -v</span><br><span class="line">yarn &#x3D;&#x3D; npm install</span><br><span class="line">yarn add PACKAGE &#x3D;&#x3D; npm install PACKAGE</span><br><span class="line">yarn add --dev PACKAGE &#x3D;&#x3D; npm install --save-dev PACKAGE</span><br><span class="line">yarn run start &#x3D;&#x3D; npm run start</span><br></pre></td></tr></table></figure><p><a href="https://classic.yarnpkg.com/es-ES/docs/migrating-from-npm" target="_blank" rel="noopener">這裡</a>可以看完整對照表</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;模組化&quot;&gt;&lt;a href=&quot;#模組化&quot; class=&quot;headerlink&quot; title=&quot;模組化&quot;&gt;&lt;/a&gt;模組化&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;require 用別人的模組&lt;br&gt;將不同功能切開，分別寫在不同檔案裡。&lt;br&gt;列如 node 就有提供很多寫好的模組，
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://JAS0NHUANG.github.io/diary/tags/JavaScript/"/>
    
      <category term="npm" scheme="http://JAS0NHUANG.github.io/diary/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>J+4 [進度] 寫題目 &amp; 學 ES6/npm/Jest</title>
    <link href="http://JAS0NHUANG.github.io/diary/J-plus-4-progress/"/>
    <id>http://JAS0NHUANG.github.io/diary/J-plus-4-progress/</id>
    <published>2020-06-16T14:54:50.000Z</published>
    <updated>2020-06-17T12:29:16.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="昨日小記"><a href="#昨日小記" class="headerlink" title="昨日小記"></a>昨日小記</h2><h3 id="重看-ALG101"><a href="#重看-ALG101" class="headerlink" title="重看 [ALG101]"></a>重看 [ALG101]</h3><p>昨天快速的重看了 [ALG101] 到單元四，重做了一些比較複雜的題目（如：印出聖誕樹、水仙花數……），因為第一次跟完 [ALG101] 的時候，有些自已亂寫的解法在 LIOJ 上面也能 AC 所以就沒有特別仔細的看老師的解法，這一次找出幾個比較複雜的仔細照老師的解法寫一次。  </p><h3 id="大O"><a href="#大O" class="headerlink" title="大O"></a>大O</h3><p>看完了 [CS101] 火球術的第七單元，對提到的排序法也有些概念了，但是那個「大O」還是一直搞不懂，怎麼算的也不清楚，這應該真的就是數學不好的問題了……O(1)、O(n) 還勉強可以知道怎麼來的，但是一看到那些 log n、(log n)c、(n!) 就真的不知道是怎麼推算出來的了，腦子大概有自動防護功能，避免它們進來搞亂我脆弱的腦子。  </p><h2 id="今日進度"><a href="#今日進度" class="headerlink" title="今日進度"></a>今日進度</h2><h3 id="檢查-week2-作業"><a href="#檢查-week2-作業" class="headerlink" title="檢查 week2 作業"></a>檢查 week2 作業</h3><ul><li><input disabled="" type="checkbox"> 檢查 week2 作業<br>確定 hw1 到 hw6 以及挑戰題沒有問題，補上想補充的，然後明天再寫一次超級挑戰題，後天應該就可以交 week2 的作業了。  </li></ul><h3 id="看-JS102-升級你的-JavaScript-技能：ES6-npm-Jest"><a href="#看-JS102-升級你的-JavaScript-技能：ES6-npm-Jest" class="headerlink" title="看 [JS102] 升級你的 JavaScript 技能：ES6 + npm + Jest"></a>看 [JS102] 升級你的 JavaScript 技能：ES6 + npm + Jest</h3><ul><li><input disabled="" type="checkbox"> 看 [JS102] 升級你的 JavaScript 技能：ES6 + npm + Jest  </li></ul><h2 id="明日進度"><a href="#明日進度" class="headerlink" title="明日進度"></a>明日進度</h2><h3 id="快速複習-ALG101-先別急著寫-leetcode-到單元六"><a href="#快速複習-ALG101-先別急著寫-leetcode-到單元六" class="headerlink" title="快速複習 [ALG101] 先別急著寫 leetcode 到單元六"></a>快速複習 [ALG101] 先別急著寫 leetcode 到單元六</h3><ul><li><input disabled="" type="checkbox"> [ALG101] 先別急著寫 leetcode 到單元六<br>一樣快速複習一遍看過的內容，把比較複雜的題目再寫一遍，雖然說是「快速」但是內容比較難一點點，題目也比較多，我解題速度也還很慢，所以大概也快不起來……  </li></ul><h3 id="將-JS101-練習-Lv2-與-Lv3-做完"><a href="#將-JS101-練習-Lv2-與-Lv3-做完" class="headerlink" title="將 [JS101] 練習 Lv2 與 Lv3 做完"></a>將 [JS101] 練習 Lv2 與 Lv3 做完</h3><ul><li><input disabled="" type="checkbox"> [JS101] 練習 Lv2 與 Lv3 做完<br>很多都跟作業、[ALG101] 的內容重覆了，應該只會大概看一下講解影片看看有沒有什麼我沒有想到的地方。<br>（看了一下課綱，發現這算是補充內容，所以排到其它主要內容後面完成。）  </li></ul><p>偷偷看了一下第四、第六、七週的內容……厚厚，真正的挑戰還沒開始呢！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;昨日小記&quot;&gt;&lt;a href=&quot;#昨日小記&quot; class=&quot;headerlink&quot; title=&quot;昨日小記&quot;&gt;&lt;/a&gt;昨日小記&lt;/h2&gt;&lt;h3 id=&quot;重看-ALG101&quot;&gt;&lt;a href=&quot;#重看-ALG101&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="每日進度" scheme="http://JAS0NHUANG.github.io/diary/tags/%E6%AF%8F%E6%97%A5%E9%80%B2%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>J+3 [進度] [ALG101] 複習</title>
    <link href="http://JAS0NHUANG.github.io/diary/J-plus-3-progress/"/>
    <id>http://JAS0NHUANG.github.io/diary/J-plus-3-progress/</id>
    <published>2020-06-15T20:31:07.000Z</published>
    <updated>2020-06-15T20:31:07.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="昨日小記"><a href="#昨日小記" class="headerlink" title="昨日小記"></a>昨日小記</h2><h3 id="完成-week2-超級挑戰題"><a href="#完成-week2-超級挑戰題" class="headerlink" title="完成 week2 超級挑戰題"></a>完成 week2 超級挑戰題</h3><p>自已真的想不出來，雖然大概理解 BFS 就是將所有可能的點都走過（實際上網路上那些 BFS 相關的文章還是看的一知半解，大概程度確實還不到那邊吧！），但是轉換成程式碼還是沒那麼容易。<br>所以就決定先把老師的解法一步一步的看懂，然後再試著自已默寫一遍，在看老師程式碼的時候，x 軸、y 軸的狀態因為到後面出現 <code>ans[y][x]</code> 還有 <code>and[newY][newX]</code> 所以有一點點被搞混了，大概理解老師是要保持一般 x 軸為水平、y 軸為垂直的慣例才會這樣寫，但是我自已是覺得，直接在 <code>endX</code>、<code>endY</code> 設定的時候就使用 <code>endX = h - 1</code>、<code>endY = w - 1</code>，會比較直覺、比較好懂一點點（因為後面就不會出現有 x y 反過來寫的狀況了。）<br>自已默寫的時候還是會出錯，有些語法、內建函式的應用還不是很熟練。<br>三天後再來試試看自已還記不記得住解法。  </p><h3 id="研究-reduce-的用法"><a href="#研究-reduce-的用法" class="headerlink" title="研究 .reduce() 的用法"></a>研究 <code>.reduce()</code> 的用法</h3><p>花了大概兩個小時找資料，再看一遍老師的影片，然後把 <code>.reduce()</code> 的用法搞懂，寫了一篇筆記（<a href="https://jas0nhuang.github.io/diary/2020/06/14/J-plus-2-note-reduce/">J+2 [筆記] 淺淺的看一下 reduce</a>），歡迎大家指教。</p><h2 id="今日進度"><a href="#今日進度" class="headerlink" title="今日進度"></a>今日進度</h2><h3 id="快速的再看一遍-ALG101-到單元四"><a href="#快速的再看一遍-ALG101-到單元四" class="headerlink" title="快速的再看一遍  [ALG101] 到單元四"></a>快速的再看一遍  [ALG101] 到單元四</h3><ul><li><input disabled="" type="checkbox"> 快速的再看一遍  [ALG101] 到單元四<br>之前很仔細的上完了這堂課，程式概念慢慢有點內化的感覺，再瀏覽一次加深印象。<br>因為到單元六內容還不少，雖然之前都看過了，把影片再過一次還是要花不少時間，今天進度就先暫訂這樣就好。也讓自已腦子可以再消化一下超級挑戰題的解法。</li></ul><h3 id="整理、修正-week1-作業"><a href="#整理、修正-week1-作業" class="headerlink" title="整理、修正 week1 作業"></a>整理、修正 week1 作業</h3><ul><li><input checked="" disabled="" type="checkbox"> 整理、修正 week 作業<br>把 week1 作業裡面要修正，想要重新整理的地方改好，重新發 PR 自已 merge。</li></ul><h2 id="明日進度"><a href="#明日進度" class="headerlink" title="明日進度"></a>明日進度</h2><h3 id="看-CS101-初心者的計概與-coding-火球術-unit-7"><a href="#看-CS101-初心者的計概與-coding-火球術-unit-7" class="headerlink" title="看 [CS101] 初心者的計概與 coding 火球術 unit 7"></a>看 [CS101] 初心者的計概與 coding 火球術 unit 7</h3><ul><li><input disabled="" type="checkbox"> [CS101] 初心者的計概與 coding 火球術 unit 7</li></ul><h3 id="將-JS101-練習-Lv2-與-Lv3-做完"><a href="#將-JS101-練習-Lv2-與-Lv3-做完" class="headerlink" title="將 [JS101] 練習 Lv2 與 Lv3 做完"></a>將 [JS101] 練習 Lv2 與 Lv3 做完</h3><ul><li><input disabled="" type="checkbox"> [JS101] 練習 Lv2 與 Lv3 做完<br>很多都跟作業、[ALG101] 的內容重覆了，應該只會大概看一下講解影片看看有沒有什麼我沒有想到的地方。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;昨日小記&quot;&gt;&lt;a href=&quot;#昨日小記&quot; class=&quot;headerlink&quot; title=&quot;昨日小記&quot;&gt;&lt;/a&gt;昨日小記&lt;/h2&gt;&lt;h3 id=&quot;完成-week2-超級挑戰題&quot;&gt;&lt;a href=&quot;#完成-week2-超級挑戰題&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="每日進度" scheme="http://JAS0NHUANG.github.io/diary/tags/%E6%AF%8F%E6%97%A5%E9%80%B2%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>J+3 [筆記] [ALG101] 與 [CS101] unit 7 雜記</title>
    <link href="http://JAS0NHUANG.github.io/diary/J-plus-3-note/"/>
    <id>http://JAS0NHUANG.github.io/diary/J-plus-3-note/</id>
    <published>2020-06-15T10:23:36.000Z</published>
    <updated>2020-06-16T10:24:49.116Z</updated>
    
    <content type="html"><![CDATA[<p>快速記下一些重看 [ALG101] 的小細節</p><h2 id="ALG101-雜記"><a href="#ALG101-雜記" class="headerlink" title="[ALG101] 雜記"></a>[ALG101] 雜記</h2><h3 id="log-小技巧"><a href="#log-小技巧" class="headerlink" title="log 小技巧"></a>log 小技巧</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let arr &#x3D; [2, 7, 5]</span><br><span class="line">console.log(JSON.stringify(arr)) &#x2F;&#x2F; &#39;[2, 7, 5]&#39;，將 arr 轉換為字串印出，避免在 dev tool 裡的輸出被後面的變動影響 </span><br><span class="line">arr.push(3)</span><br><span class="line">console.log(arr) &#x2F;&#x2F; [2, 7, 5, 3]</span><br></pre></td></tr></table></figure><h3 id="fizz-Buzz-解法研究"><a href="#fizz-Buzz-解法研究" class="headerlink" title="fizz Buzz 解法研究"></a>fizz Buzz 解法研究</h3><p><a href="https://leetcode.com/articles/fizz-buzz/#" target="_blank" rel="noopener">LeetCode - Fizz Buzz</a></p><h3 id="大小寫轉換"><a href="#大小寫轉換" class="headerlink" title="大小寫轉換"></a>大小寫轉換</h3><p>有三種解法：</p><ol><li>ASCII code</li><li>比較字典序。例：z &gt; b，k &gt; g……</li><li>內建 <code>.toUpperCase()</code> 或 <code>.toLowerCase()</code></li></ol><h3 id="幾個水桶"><a href="#幾個水桶" class="headerlink" title="幾個水桶"></a>幾個水桶</h3><p>翻成數學問題就是：將一個 10 進位的數字轉換為 2 進位，並輸出此二進位數字包含幾個 1<br>有上過課馬上就能聯想到這個解法，我第一次解的時候是用題目給的上限值開始往下取，先找到最大的 2 的 x 次方數，減去後再繼續往下取。</p><h3 id="大數字如何處理"><a href="#大數字如何處理" class="headerlink" title="大數字如何處理"></a>大數字如何處理</h3><p>如何處理超過 MAX_SAFE_INTEGER 的數字？MDN 就有說了：</p><blockquote><p>For larger integers, consider using BigInt.</p></blockquote><h3 id="印出金字塔-印出聖誕樹"><a href="#印出金字塔-印出聖誕樹" class="headerlink" title="印出金字塔/印出聖誕樹"></a>印出金字塔/印出聖誕樹</h3><p>還是花了快一個小時才解出來，放到 LIOJ 上還是 AC，但是寫出來的 Code 比第一次在 LIOJ 上面解出來的還要噁心……</p><h3 id="印出平方數"><a href="#印出平方數" class="headerlink" title="印出平方數"></a>印出平方數</h3><p>兩種解法：</p><ol><li>檢查每一個數字被開根號後是否為整數。</li><li>從 1 開始計算每個數的平方，一直到大於所求範圍結束。</li></ol><h2 id="CS101-火球術-unit-7-雜記"><a href="#CS101-火球術-unit-7-雜記" class="headerlink" title="[CS101] 火球術 unit 7 雜記"></a>[CS101] 火球術 unit 7 雜記</h2><h2 id="排序法"><a href="#排序法" class="headerlink" title="排序法"></a>排序法</h2><p><a href="https://visualgo.net/en" target="_blank" rel="noopener">VISUALGO</a></p><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>遍歷陣列，找到最小與第一位交換，再找第二小與第二位交換、第三小與第三位交換……類推</p><h3 id="bubble"><a href="#bubble" class="headerlink" title="bubble"></a>bubble</h3><p>兩兩比較，較大放右邊，較小放左邊</p><h3 id="insertion"><a href="#insertion" class="headerlink" title="insertion"></a>insertion</h3><p>將前兩位先按順序放好，第三位起與前面數字比大小，大於第二位則放至第三位，大於第一位、小於第二位則放至第二位，小於第一位則放至第一位。第四位與前面數字比大小，大於第三位則放至第四位，大於第二位小於第三位則放至第三位……類推</p><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p>切半、切半、再切半！合併、合併、再合併！</p><h3 id="quick"><a href="#quick" class="headerlink" title="quick"></a>quick</h3><p>先將第一個數字設定為基準點（piviot），尋找比它小的數字，第一個找到的調換到它旁邊，第二個找到的調換到第一個的旁邊……類推。一直到找不到比較小的數字後，將第一個數字與最後一個找到的數字對調。<br>持續進行這個動作，直到每個數字歸位。</p><p>用文字敘述實在很不容易想像，還是上 VISUALGO 看動畫吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;快速記下一些重看 [ALG101] 的小細節&lt;/p&gt;
&lt;h2 id=&quot;ALG101-雜記&quot;&gt;&lt;a href=&quot;#ALG101-雜記&quot; class=&quot;headerlink&quot; title=&quot;[ALG101] 雜記&quot;&gt;&lt;/a&gt;[ALG101] 雜記&lt;/h2&gt;&lt;h3 id=&quot;log
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://JAS0NHUANG.github.io/diary/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>J+2 [筆記] 淺淺的看一下 reduce</title>
    <link href="http://JAS0NHUANG.github.io/diary/J-plus-2-note-reduce/"/>
    <id>http://JAS0NHUANG.github.io/diary/J-plus-2-note-reduce/</id>
    <published>2020-06-14T21:53:20.000Z</published>
    <updated>2020-06-14T21:53:21.010Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Array-prototype-reduce"><a href="#Array-prototype-reduce" class="headerlink" title="Array.prototype.reduce()"></a><code>Array.prototype.reduce()</code></h2><p>嗯，一直說要搞懂 <code>reduce()</code> 這個方法，拖了好幾天，影片看了好幾次，文件看了好幾篇，總算下定決心來好好研究一下。  </p><blockquote><p>The <code>reduce()</code> method executes a reducer function (that you provide) on each element of the array, resulting in single output value.  <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="noopener">MDN - Array.prototype.reduce()</a></p></blockquote><p>這篇筆記是給至少知道 <code>map()</code>、<code>forEach()</code> 怎麼使用的人看的，還不清楚這兩個方法的話可能會看不太懂……</p><h3 id="為什麼它剛開始比較難搞"><a href="#為什麼它剛開始比較難搞" class="headerlink" title="為什麼它剛開始比較難搞"></a>為什麼它剛開始比較難搞</h3><p>因為在這之前，我所學到的方法在呼叫 callback 函式的時候都「可以」只給一個參數，像是 <code>map()</code>、 <code>forEach()</code> ，而且必要的參數就是正在處理的陣列中元素，但是這個 <code>reduce()</code> 所呼叫的 callback 函式，一定要有兩個基本的參數，而且第一個還不是正在處理的陣列中元素，搞的我好亂阿！<br>那到底 <code>reduce()</code> 裡的 callback 要怎麼 call 法，下面就用最基本的取陣列值總合做為例子研究一下吧！</p><h3 id="reduce-裡的-callback-function"><a href="#reduce-裡的-callback-function" class="headerlink" title="reduce() 裡的 callback function"></a><code>reduce()</code> 裡的 callback function</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const numberArray &#x3D; [1, 2, 3]</span><br><span class="line">const numberSum &#x3D; numberArray.reduce(</span><br><span class="line">  function(accumulator, currentValue) &#123; &#x2F;&#x2F; 特地把它弄出來</span><br><span class="line">    return accumulator + currentValue   &#x2F;&#x2F; !!!!!!!!!!!!!!!!!!!!!!!!</span><br><span class="line">    &#125;                                   &#x2F;&#x2F; 平常不要這樣寫</span><br><span class="line">  )</span><br><span class="line">console.log(numberSum) &#x2F;&#x2F; 6</span><br></pre></td></tr></table></figure><p>在這個例子裡面，包在 <code>.reduce()</code> 的括號裡面的就是那個有一點點難搞的 callback 函式，它要求必要的參數有 accumulator 與 currentValue 兩個。</p><ol><li>accumulator 這個參數可以把它想像成一個「接收器」，它會接收每次 callback 函式回傳的值作為他的值，然後傳入 callback 函式進行下一次的處理。</li><li>currentValue 則是「目前處理的陣列元素」。  </li></ol><p>看完兩個參數的定義肯定還是霧煞煞，它到底怎麼運作的？accumulator 的初始值會是什麼？currentValue 又會從第幾個元素開始處理？讓我們跑一遍上面這段程式的流程應該就會比較清楚了。</p><h3 id="跟著-reduce-跑一遍"><a href="#跟著-reduce-跑一遍" class="headerlink" title="跟著 reduce() 跑一遍"></a>跟著 <code>reduce()</code> 跑一遍</h3><p>首先，一定要先有一個陣列，不必多講。<br>然後看到這個 <code>const numberSum =</code> 的寫法應該就知道，它會回傳一個值，而這個值不會改變原始陣列，所以要請一個變數去把它接起來！<br>然後請出陣列，對著他使用 <code>.reduce()</code> 方法。  </p><p><strong>重點來了</strong>  </p><ul><li>callback 函式開始執行，初始值的載入<strong>非常重要</strong>，其實搞懂它的初始值是什麼就懂九成了。  </li><li>accumulator 的初始值在沒有特別指定的狀況之下（等一下會講到如何指定 accumulator 的初始值），就會是陣列中的第一個元素，在這個例子中就是 index 為 0 的數字 1。</li><li>currentValue 因為第一個元素被 accumulator 取用了，所以它會自動往下一個元素取值，在例子中就是 index 為 1 的數字 2。  </li></ul><p>現在上面這段程式就很好懂了：  </p><ol><li>第一次進入 callback 函式，accumulator == 1, currentValue == 2, 回傳他們的相加值 3 並傳給 accumulator 作為下一次使用。  </li><li>第二次進入 callback 函式，accumulator == 3，currentValue == 3, 回傳他們的相加值 6，因為 currentValue 已經是陣列中的最後一個元素，所以 <code>reduce()</code> 方法結束，取得一個回傳值 6。  </li><li>回傳值 6 被傳給 numberSum 變數，最後再被 <code>console.log()</code> 出來。  <h3 id="如何自訂初始值"><a href="#如何自訂初始值" class="headerlink" title="如何自訂初始值"></a>如何自訂初始值</h3>除了讓 callback 函式自動產生初始值，我們還可以自已指定初始值。<br>方法很簡單，就是在 <code>reduce()</code> 方法中除了 callback 函式再傳給他另外一個參數，例如：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ARRAY.reduce(function(acc, cur)&#123;&#125;, 自訂的初始值寫在這裡)</span><br></pre></td></tr></table></figure>這個「自訂的初始值」就會被傳入 accumulator 作為引數，而 currentValue 則會自動取得陣列第一個元素的值作為引數。<br>把上面的例子改一下，加入初始值：  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const numberArray &#x3D; [1, 2, 3]</span><br><span class="line">const numberSum &#x3D; numberArray.reduce(</span><br><span class="line">  function(acc, cur) &#123; return acc + cur&#125;, 100 &#x2F;&#x2F; 這個 100 就是「自訂的初始值」)</span><br><span class="line">console.log(numberSum) &#x2F;&#x2F; 106</span><br></pre></td></tr></table></figure>這段程碼就在使用 <code>.reduce()</code> 方法時把初始值設定為 100，所以第一次進入 callback 函式時 acc 的值就會是 100，而 cur 的值則會是陣列中 index 0 的值 1。接下來的執行流程應該就不必多講了。<br>最後的結果就是 106。  </li></ol><p>瞭解參數傳遞的邏輯之後，<code>.reduce()</code> 其實也不難懂，搭配其它可以傳入的參數（目前元素的 Index，陣列）還可以有其它的應用，也不那麼難理解，但是身為初學者先淺淺的學到這邊吧！其它部分未來再慢慢深入研究了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Array-prototype-reduce&quot;&gt;&lt;a href=&quot;#Array-prototype-reduce&quot; class=&quot;headerlink&quot; title=&quot;Array.prototype.reduce()&quot;&gt;&lt;/a&gt;&lt;code&gt;Array.protot
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://JAS0NHUANG.github.io/diary/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>J+2 [進度] BFS 與 reduce</title>
    <link href="http://JAS0NHUANG.github.io/diary/J-plus-2-progress/"/>
    <id>http://JAS0NHUANG.github.io/diary/J-plus-2-progress/</id>
    <published>2020-06-14T08:50:39.000Z</published>
    <updated>2020-06-15T08:51:00.708Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Parc-de-sceaux-半日遊"><a href="#Parc-de-sceaux-半日遊" class="headerlink" title="Parc de sceaux 半日遊"></a>Parc de sceaux 半日遊</h2><p>跟老婆、小孩一起去公園玩了一個下午，天氣很好，人超多，大草坪上好幾組人架起網子在打排球，好久沒有打球了，雖然幾乎完全不會打排球，還是跑去找了一組看起來實力比較差一點的跟他們打了大概一個多小時，運動一下真的對放鬆身心很有幫助，舒服的週六下午。  </p><h2 id="將-Eslint-規則改為-standard"><a href="#將-Eslint-規則改為-standard" class="headerlink" title="將 Eslint 規則改為 standard"></a>將 Eslint 規則改為 standard</h2><p>昨天提到作業庫設定的 Eslint，因為是用 Airbnb 的規則，所以不能用 <code>++</code> 也強制要加分號，老師就回應說可以自已改，我就自已換成了 standard 的規則了，可以用 <code>++</code> ，分號則是強制「不能加」。  </p><h2 id="費氏數列的定義？"><a href="#費氏數列的定義？" class="headerlink" title="費氏數列的定義？"></a>費氏數列的定義？</h2><p>在寫 week2 hw6 的時候想到費氏數列，但是一直不是很清楚費氏數列明確的定義，是一定要從 0, 1 開始嗎？（我自已看資料的感覺是這樣）還是只要從第三位開始都是前兩位的合就可以算是費氏數列？</p><h2 id="今日進度"><a href="#今日進度" class="headerlink" title="今日進度"></a>今日進度</h2><h3 id="寫-week2-超級挑戰題"><a href="#寫-week2-超級挑戰題" class="headerlink" title="寫 week2 超級挑戰題"></a>寫 week2 超級挑戰題</h3><ul><li><input checked="" disabled="" type="checkbox"> 完成 week2 超級挑戰題<br>昨天把作業 hw1 - hw6 以及挑戰題寫完了，今天目標還是一樣：搞懂 BFS 怎樣寫成 JavaScript，或者至少搞懂老師是怎麼解超級挑戰題的……  </li></ul><h3 id="做完-JS101-Lv1-練習十的筆記"><a href="#做完-JS101-Lv1-練習十的筆記" class="headerlink" title="做完 [JS101] Lv1 練習十的筆記"></a>做完 [JS101] Lv1 練習十的筆記</h3><ul><li><input checked="" disabled="" type="checkbox"> 關於 reduce 的用法<br>昨天出去玩了一個下午，晚上又去朋友家吃飯，沒什麼進度，reduce 的用法講了好幾天了現在還是只有一點概念，不是完全清楚……  </li></ul><h2 id="明日進度"><a href="#明日進度" class="headerlink" title="明日進度"></a>明日進度</h2><p>（前一天的明日進度複製貼上 XD）  </p><h3 id="將-JS101-練習-Lv2-與-Lv3-做完"><a href="#將-JS101-練習-Lv2-與-Lv3-做完" class="headerlink" title="將 [JS101] 練習 Lv2 與 Lv3 做完"></a>將 [JS101] 練習 Lv2 與 Lv3 做完</h3><ul><li><input disabled="" type="checkbox"> [JS101] 練習 Lv2 與 Lv3 做完<br>很多都跟作業、[ALG101] 的內容重覆了，應該只會大概看一下講解影片看看有沒有什麼我沒有想到的地方。  </li></ul><h3 id="快速的再看一遍-ALG101-到單元六"><a href="#快速的再看一遍-ALG101-到單元六" class="headerlink" title="快速的再看一遍  [ALG101] 到單元六"></a>快速的再看一遍  [ALG101] 到單元六</h3><ul><li><input disabled="" type="checkbox"> 快速的再看一遍  [ALG101] 到單元六<br>之前很仔細的上完了這堂課，程式概念慢慢有點內化的感覺，再瀏覽一次加深印象。  </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Parc-de-sceaux-半日遊&quot;&gt;&lt;a href=&quot;#Parc-de-sceaux-半日遊&quot; class=&quot;headerlink&quot; title=&quot;Parc de sceaux 半日遊&quot;&gt;&lt;/a&gt;Parc de sceaux 半日遊&lt;/h2&gt;&lt;p&gt;跟老婆、小孩
      
    
    </summary>
    
    
      <category term="每日進度" scheme="http://JAS0NHUANG.github.io/diary/tags/%E6%AF%8F%E6%97%A5%E9%80%B2%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>J+1 [日記]  搞懂 JS 還不懂的部分 - 2</title>
    <link href="http://JAS0NHUANG.github.io/diary/J-plus-1-diary/"/>
    <id>http://JAS0NHUANG.github.io/diary/J-plus-1-diary/</id>
    <published>2020-06-13T11:46:22.000Z</published>
    <updated>2020-06-14T11:47:16.501Z</updated>
    
    <content type="html"><![CDATA[<h1 id="J-1-日記"><a href="#J-1-日記" class="headerlink" title="J+1 [日記]"></a>J+1 [日記]</h1><h2 id="寫作業與題目時的問題"><a href="#寫作業與題目時的問題" class="headerlink" title="寫作業與題目時的問題"></a>寫作業與題目時的問題</h2><h3 id="關於-Eslint"><a href="#關於-Eslint" class="headerlink" title="關於 Eslint"></a>關於 Eslint</h3><p>作業庫裡面設定 Eslint 會禁止 <code>++</code> 的使用，雖然 JavaScript 大神 Crockford 大概 10 年前就在說不要用 <code>++</code> 或 <code>--</code> <a href="https://youtu.be/47Ceot8yqeI?t=4140" target="_blank" rel="noopener">Crockford on JavaScript - Part 5: The End of All Things</a>（連結會直接從討論 <code>++</code>、<code>--</code> 的地方開始），但是課程裡還是有教到，不知道應該如何處理？真的不應該使用？先不要使用？還是有辦法改成不糾正這個問題？<br>還有句尾的分號也設定了一定要加，老師在一些示範影片裡面好像也都沒有打分號，不知道是不是能夠改為不必加？</p><h2 id="Immutable-到底可變不可變？！"><a href="#Immutable-到底可變不可變？！" class="headerlink" title="Immutable 到底可變不可變？！"></a>Immutable 到底可變不可變？！</h2><p>Primitive values（原始數值）<br>Primitive type（原始資料型態）</p><blockquote><p>All primitives are immutable, i.e., they cannot be altered. It is important not to confuse a primitive itself with a variable assigned a primitive value. The variable may be reassigned a new value, but the existing value can not be changed in the ways that objects, arrays, and functions can be altered.<br>一定要搞清楚「變數」與「原始數值」之間的差異。</p></blockquote><p>不可變的數值在經過函數處理後一定要回傳給一個「變數」儲存（可以這樣表達嗎？），因為它的「原始數值」沒辦法被改變。<br>因為「原始數值」</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let a &#x3D; &#39;hello&#39; &#x2F;&#x2F; a 是變數 &#39;hello&#39; 是「原始數值」</span><br><span class="line">a.toUpperCase() &#x2F;&#x2F; 沒有作用，&#39;hello&#39;被處理後沒有被儲存</span><br><span class="line">a &#x3D; a.toUpperCase() &#x2F;&#x2F; &#39;hello&#39; 在經過處理後被傳回給 a</span><br></pre></td></tr></table></figure><p>物件（object）為「可變」資料型態<br>如陣列（array）是物件（object）的一種，所以它是可變的，因此對它呼叫內建函式處理後會直接改變它本來的內容，然後回傳另一個值，所以如果把函式處理後的值傳給一個變數，它「可能」會與本來的內容不同，例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let a &#x3D; [1, 2]</span><br><span class="line">a.push(3) &#x2F;&#x2F; 原始陣列會被更新為 [1, 2, 3]</span><br><span class="line">console.log(a) &#x2F;&#x2F; [1, 2, 3]</span><br><span class="line">a &#x3D; a.push(99) &#x2F;&#x2F; 原始陣列同樣會被更新，變成 [1, 2, 3, 99]，但是這個函式是會回傳新陣列的長度，所以 a 就會被賦值為 4</span><br><span class="line">console.log(a) &#x2F;&#x2F; 4</span><br></pre></td></tr></table></figure><p>但是有些函式的結果是一樣的，像是 array.reverse()</p><p>但是物件裡也有不會改動到原本資料的函式，如 array.join()</p><p>array 真的很煩，.splice() 與 .slice() 的行為也不同</p><hr><p>跟家人去公園玩了一個下午，晚上去朋友家吃飯，下面預訂要完成的內容都沒有完成 XD。但是難得可以出門到空曠的地方跑一跑，還跟公園裡的陌生人打了一下排球，雖然不太會打，但是運動一下真的蠻舒服的。</p><h2 id="reduce-用法"><a href="#reduce-用法" class="headerlink" title="reduce 用法"></a>reduce 用法</h2><p>綜合題目練習 Lv1 練習十，可以用 reduce()解。</p><h2 id="浮點數誤差"><a href="#浮點數誤差" class="headerlink" title="浮點數誤差"></a>浮點數誤差</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;J-1-日記&quot;&gt;&lt;a href=&quot;#J-1-日記&quot; class=&quot;headerlink&quot; title=&quot;J+1 [日記]&quot;&gt;&lt;/a&gt;J+1 [日記]&lt;/h1&gt;&lt;h2 id=&quot;寫作業與題目時的問題&quot;&gt;&lt;a href=&quot;#寫作業與題目時的問題&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://JAS0NHUANG.github.io/diary/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>J+1 [進度] 複習 JavaScript 基礎 - 2</title>
    <link href="http://JAS0NHUANG.github.io/diary/J-plus-1-progress/"/>
    <id>http://JAS0NHUANG.github.io/diary/J-plus-1-progress/</id>
    <published>2020-06-13T11:39:03.000Z</published>
    <updated>2020-06-14T11:41:54.755Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jour-J-複習-JavaScript-基礎"><a href="#Jour-J-複習-JavaScript-基礎" class="headerlink" title="Jour-J 複習 JavaScript 基礎"></a>Jour-J 複習 JavaScript 基礎</h1><h2 id="感謝-minw-助教"><a href="#感謝-minw-助教" class="headerlink" title="感謝 minw 助教"></a>感謝 minw 助教</h2><p>感謝 minw 助教仔細的幫我改了作業，還給了很多實用的建議，學到不少東西，也知道自已大概還有什麼地方需要加強。<br>然後出於好奇就去翻了 <a href="https://medium.com/@minw/" target="_blank" rel="noopener">minw 助教的部落格</a>，有兩篇文章完整的整理參加計畫的心得，可能不少同學也已經看過了，我自已覺得那幾個 side project 的想法真的很不錯，也做的超好的（當然可能 minw 本來就有累積一些不錯的基礎了？！），把所學的東西馬上應用在小計畫上面。<br>可能也應該要想想怎樣做一些有實用性的 project 以保持學習的動力，比較有成就感，對未來真的求職時也有幫助。  </p><h2 id="遇到的問題"><a href="#遇到的問題" class="headerlink" title="遇到的問題"></a>遇到的問題</h2><p>作業庫裡面設定好的 Eslint 會禁止 <code>++</code> 的使用，雖然 JavaScript 大神 Crockford 大概 10 年前就在說不要用 <code>++</code> 或 <code>--</code> <a href="https://youtu.be/47Ceot8yqeI?t=4140" target="_blank" rel="noopener">Crockford on JavaScript - Part 5: The End of All Things</a>（連結會直接從討論 <code>++</code>、<code>--</code> 的地方開始，不知道這幾年他的觀點有沒有改變？），但是課程裡還是有教到，不知道應該如何處理，真的不應該使用？先不要使用？還是有辦法改成不糾正這個問題？<br>還有句尾的分號也設定了一定要加，老師在一些示範影片裡面好像也都沒有打分號，不知道是不是能夠改為不必加？  </p><h2 id="今日進度"><a href="#今日進度" class="headerlink" title="今日進度"></a>今日進度</h2><h3 id="看完-JS101"><a href="#看完-JS101" class="headerlink" title="看完 [JS101]"></a>看完 [JS101]</h3><ul><li><input checked="" disabled="" type="checkbox"> [JS101] 用 JavaScript 一步步打造程式基礎到「綜合練習 Lv1」<br>昨天看已經差不多都看完了，也大概做了一點筆記，把還不是很熟悉的東西記下來，只剩「Immutable 觀念」以及「Lv1 練習十」講解影片（關於 reduce 用法的部分）沒有仔細看完，今天看完、做完筆記。  </li></ul><h3 id="寫-week2-作業"><a href="#寫-week2-作業" class="headerlink" title="寫 week2 作業"></a>寫 week2 作業</h3><ul><li><input disabled="" type="checkbox"> 寫完 week2 作業 hw1 - hw5<br>昨天寫了前兩題，沒什麼大問題。  </li></ul><h3 id="全家老小到-Parc-de-Sceaux-走走"><a href="#全家老小到-Parc-de-Sceaux-走走" class="headerlink" title="全家老小到 Parc de Sceaux 走走"></a>全家老小到 Parc de Sceaux 走走</h3><p>這個公園算是巴黎近郊有名的賞櫻公園，它有兩塊大約各一公頃的櫻花樹林，每年春天都會有超多日本人在那裡聚集辦櫻花季之類的活動，很舒服的一個公園，但是今年肺炎疫情影響，大概三週前才重新開放，櫻花都謝了！帶著棒球手套跟球去逛逛，希望能找到願意一起丟丟球的法國佬。（在法國要找個人 KGB 都不太容易阿……）  </p><h2 id="明日進度"><a href="#明日進度" class="headerlink" title="明日進度"></a>明日進度</h2><h3 id="將-JS101-練習-Lv2-與-Lv3-做完"><a href="#將-JS101-練習-Lv2-與-Lv3-做完" class="headerlink" title="將 [JS101] 練習 Lv2 與 Lv3 做完"></a>將 [JS101] 練習 Lv2 與 Lv3 做完</h3><ul><li><input disabled="" type="checkbox"> [JS101] 練習 Lv2 與 Lv3 做完<br>很多都跟作業、[ALG101] 的內容重覆了，應該只會大概看一下講解影片看看有沒有什麼我沒有想到的地方。</li></ul><h3 id="搞懂超級挑戰題"><a href="#搞懂超級挑戰題" class="headerlink" title="搞懂超級挑戰題"></a>搞懂超級挑戰題</h3><ul><li><input disabled="" type="checkbox"> 搞懂超級挑戰題，確實學會 BFS 到底是在幹什麼</li></ul><h3 id="快速的再看一遍-ALG101-到單元六"><a href="#快速的再看一遍-ALG101-到單元六" class="headerlink" title="快速的再看一遍  [ALG101] 到單元六"></a>快速的再看一遍  [ALG101] 到單元六</h3><ul><li><input disabled="" type="checkbox"> 快速的再看一遍  [ALG101] 到單元六<br>之前很仔細的上完了這堂課，程式概念慢慢有點內化的感覺，再瀏覽一次加深印象。  </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Jour-J-複習-JavaScript-基礎&quot;&gt;&lt;a href=&quot;#Jour-J-複習-JavaScript-基礎&quot; class=&quot;headerlink&quot; title=&quot;Jour-J 複習 JavaScript 基礎&quot;&gt;&lt;/a&gt;Jour-J 複習 JavaScr
      
    
    </summary>
    
    
      <category term="每日進度" scheme="http://JAS0NHUANG.github.io/diary/tags/%E6%AF%8F%E6%97%A5%E9%80%B2%E5%BA%A6/"/>
    
      <category term="JavaScript" scheme="http://JAS0NHUANG.github.io/diary/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Jour-J [日記] 搞懂 JS 還不懂的部分 - 1</title>
    <link href="http://JAS0NHUANG.github.io/diary/jour-j-diary/"/>
    <id>http://JAS0NHUANG.github.io/diary/jour-j-diary/</id>
    <published>2020-06-12T21:58:23.000Z</published>
    <updated>2020-06-14T12:25:45.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript-基礎概念"><a href="#JavaScript-基礎概念" class="headerlink" title="JavaScript 基礎概念"></a>JavaScript 基礎概念</h2><ul><li>一定要執行環境：瀏覽器（document、console……）、Node.js（fs、console……）、Deno</li></ul><h2 id="基本語法"><a href="#基本語法" class="headerlink" title="基本語法"></a>基本語法</h2><p>快速看過一次影片，就不再多作筆記了，可以參考 N 年前跟著 Learn JavaScript Properly 一系列的筆記：<a href="https://jas0nhuang.github.io/2015/04/10/Learn-JavaScript-Properly-1-1/">Learn JavaScript Properly 1-1 Introduction</a><br><strong>不要卡在位元運算的地方</strong> XD  </p><h2 id="一些還不太清楚的基礎"><a href="#一些還不太清楚的基礎" class="headerlink" title="一些還不太清楚的基礎"></a>一些還不太清楚的基礎</h2><ol><li>邏輯運算之短路性質：</li></ol><ul><li>or  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">true || true &#x3D;&#x3D;&#x3D; true</span><br><span class="line">false || false &#x3D;&#x3D;&#x3D; false</span><br><span class="line">ture || false &#x3D;&#x3D;&#x3D; true</span><br><span class="line">false || true &#x3D;&#x3D;&#x3D; true</span><br><span class="line">13 || 13 &#x3D;&#x3D;&#x3D; 13</span><br><span class="line">13 || 10 &#x3D;&#x3D;&#x3D; 13</span><br><span class="line">10 || 13 &#x3D;&#x3D;&#x3D; 10</span><br><span class="line">10 || false &#x3D;&#x3D;&#x3D; 10</span><br><span class="line">false || 10 &#x3D;&#x3D;&#x3D; 10</span><br><span class="line">true || 10 &#x3D;&#x3D;&#x3D; true</span><br><span class="line">0 || 10 &#x3D;&#x3D;&#x3D; 10</span><br><span class="line">10 || 0 &#x3D;&#x3D;&#x3D; 10</span><br></pre></td></tr></table></figure>結論：如果第一個值為 true 則結果為第一個值，不會考慮第二個值。（數字 0 會被當成 false）  </li><li>and  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">13 &amp;&amp; 10 &#x3D;&#x3D;&#x3D; 10</span><br><span class="line">10 &amp;&amp; 13 &#x3D;&#x3D;&#x3D; 13</span><br></pre></td></tr></table></figure>結論：兩者皆為 true，結果為第二個值。如果第一個值為 false，則結果為 false，不考慮第二個值。  </li></ul><ol start="2"><li><p>位移運算子<br>針對位元操作<br><code>&gt;&gt;</code> 與 <code>&lt;&lt;</code>  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 &lt;&lt; 1 &#x3D;&#x3D;&#x3D; 20</span><br><span class="line">10 &lt;&lt; 3 &#x3D;&#x3D;&#x3D; 80</span><br><span class="line">1 &lt;&lt; 10 &#x3D;&#x3D;&#x3D; 1024</span><br><span class="line">10 &gt;&gt; 1 &#x3D;&#x3D;&#x3D; 5</span><br><span class="line">9 &gt;&gt; 1 &#x3D;&#x3D;&#x3D; 4</span><br></pre></td></tr></table></figure><p>可以看成乘以 2 或 除以 2，「通常」位元運算的效能會比較好。</p></li><li><p>位元運算<br>針對每一個位元做邏輯處理<br>and <code>&amp;</code>，or<code>|</code>  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 &amp; 15 &#x3D;&#x3D;&#x3D; 10 &#x2F;&#x2F; 1010 and 1111 &#x3D;&#x3D;&#x3D; 1010 &#x2F;&#x2F; true false true false</span><br><span class="line">10 &amp;&amp; 15 &#x3D;&#x3D;&#x3D; 15</span><br><span class="line">10 | 15 &#x3D;&#x3D;&#x3D; 15 &#x2F;&#x2F; 1010 or 1111 &#x3D;&#x3D;&#x3D; 1111 &#x2F;&#x2F; true true true true</span><br><span class="line">10 || 15 &#x3D;&#x3D;&#x3D; 10</span><br></pre></td></tr></table></figure><p>xor（exclusive or）<code>^</code>（caret）<br>兩個位元相同則回傳 0，不同則回傳 1</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 ^ 15 &#x3D;&#x3D;&#x3D; 5 &#x2F;&#x2F; 1010 xor 1111 &#x3D;&#x3D;&#x3D; 0101</span><br><span class="line">2 ^ 4 &#x3D;&#x3D;&#x3D; 6 &#x2F;&#x2F; 10 xor 100 &#x3D;&#x3D;&#x3D; 110</span><br></pre></td></tr></table></figure><p>not <code>~</code><br>會處理整個數字轉換為二進位時的所有位元（包含前面所有的 0）<br>測試了一下，在 2 的 32 次方減 1 與 2 的 負 32 次方之間的整數，都會被輸出為其負數減 1 ，因為行為實在太古怪，在這裡就不多花時間了</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~1 &#x3D;&#x3D;&#x3D; -2</span><br><span class="line">~2147483647 &#x3D;&#x3D;&#x3D; -2147483648</span><br></pre></td></tr></table></figure></li></ol><ul><li>位元運算應用：<br>判斷偶數  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A &amp; 1 &#x3D;&#x3D;&#x3D; 1 &#x2F;&#x2F; 二進位之最後一位為 1</span><br><span class="line">A &amp; 1 &#x3D;&#x3D;&#x3D; 0 &#x2F;&#x2F; 二進位之最後一位為 0</span><br><span class="line">10 &amp; 1 &#x3D;&#x3D;&#x3D; 0</span><br><span class="line">11 &amp; 1 &#x3D;&#x3D;&#x3D; 1</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li><p>「蛇式」與「駝峰式」<br>查了一下英文<br><code>this_variable</code>：snake case<br><code>thisVariable</code>：camel case  </p></li><li><p>有關 <code>++</code> 與 <code>--</code><br>大神 Crockford 在大概 10 年前有一段演講：<a href="https://youtu.be/47Ceot8yqeI?t=4140" target="_blank" rel="noopener">Crockford on JavaScript - Part 5: The End of All Things</a>，裡面有提到使用 <code>++</code> 或 <code>--</code> 的壞處，不知道現在他是不是有改變，總之，想不想用各人自已決定囉！<br>我自已是覺得用在 for 迴圈裡應該是不至於有什麼嚴重的安全性問題吧？！如果沒有安全性問題，又已經變約定俗成，大家都看的懂，那我就實在想不到有什麼不能用的理由了。<br><code>++i</code> 與 <code>i++</code> 的差異，執行順序不同<br>不要多重 <code>++</code> 或 <code>--</code>  </p></li><li><p>變數型態<br>可以用 <code>typeof</code> 查看型態</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typeof true &#x2F;&#x2F; boolean</span><br><span class="line">typeof 10 &#x2F;&#x2F; number</span><br><span class="line">typeof &quot;hello&quot; &#x2F;&#x2F; string</span><br><span class="line">typeof [1] &#x2F;&#x2F; object &#x2F;&#x2F; array is an object</span><br><span class="line">typeof &#123;XXX&#125; &#x2F;&#x2F; object</span><br><span class="line">typeof null &#x2F;&#x2F; object &#x2F;&#x2F; old bug</span><br><span class="line">typeof undefined &#x2F;&#x2F; undefined</span><br><span class="line">typeof function &#x2F;&#x2F; function</span><br></pre></td></tr></table></figure></li><li><p>變數運算<br><code>parseInt(X, Y)</code> 將 X 轉換為 Y 進位的數字<br><code>Number(X)</code> 將 X 轉為數字<br>浮點數誤差問題</p></li><li><p>物件之間是否相等？<br>直接比較兩個物件不會相等！因為底層存取時物件反應的其實是記憶體位置。  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">([1] &#x3D;&#x3D;&#x3D; [1]) &#x3D;&#x3D;&#x3D; false</span><br><span class="line">(&#123;a:2&#125; &#x3D;&#x3D;&#x3D; &#123;a:2&#125;) &#x3D;&#x3D;&#x3D; false</span><br></pre></td></tr></table></figure><p>賦值、改值的行為要注意：  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let a &#x3D; [1, 2]</span><br><span class="line">let b &#x3D; a</span><br><span class="line">b.push(3)</span><br><span class="line">a &#x3D;&#x3D;&#x3D; b &#x2F;&#x2F; true a &#x3D;&#x3D;&#x3D; [1, 2, 3]，b &#x3D;&#x3D;&#x3D; [1, 2, 3]</span><br><span class="line">b &#x3D; [3, 4]</span><br><span class="line">a &#x3D;&#x3D;&#x3D; b &#x2F;&#x2F; false a &#x3D;&#x3D;&#x3D; [1, 2]，b &#x3D;&#x3D;&#x3D; [3, 4]</span><br></pre></td></tr></table></figure></li><li><p>比較少用的 switch  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">switch(month)&#123;</span><br><span class="line">  case 1:</span><br><span class="line">    return &#39;一月&#39;</span><br><span class="line">    break</span><br><span class="line">  case 2:</span><br><span class="line">    return &#39;二月&#39;</span><br><span class="line">    break</span><br><span class="line">  default:</span><br><span class="line">    return &#39;幾月啦？&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>三元運算子 Ternary Operator<br>可代替簡單的 if else（就不要搞成巢狀了……）  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yourScore &gt;&#x3D; 60 ? &#39;及格&#39; : &#39;不及格&#39;</span><br></pre></td></tr></table></figure></li><li><p>沒用過的 do while</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">do &#123;</span><br><span class="line">  </span><br><span class="line">&#125; while()</span><br></pre></td></tr></table></figure><p>break 與 continue 的行為：<br>break：跳出迴圈<br>continue：跳過迴圈內以下的其它動作，重頭再檢查條件並執行一次迴圈<br>可以使用 Chrome Devtool 一步一步跑，關鍵字：<code>debugger</code></p></li><li><p>參數與引數<br>argument and parameter<br>在函式中可以取用 arguments 物件，類陣列物件  </p></li><li><p>pass by …<br>pass by value<br>pass by reference：JavaScript 沒有這一種方式<br>pass by sharing  </p></li><li><p>常用內建函式整理：</p></li></ol><ul><li>數字：<br><code>Number()</code>、<code>parseInt(想轉換的資料, 進位方式)</code>、<code>parseFloat()</code>、<code>parseFloat.toFix(小數點後幾位)</code>、<code>MAX_VALUE</code>、<code>Math.PI</code>、<code>Math.ceil()</code>、<code>Math.floor()</code>、<code>Math.round()</code>、<code>Math.squrt()</code>、<code>Math.pow()</code>、<code>Math.random()</code>、<code>.toString()</code>  </li><li>字串：<br><code>toUpperCase()</code>、<code>toLowerCase()</code>、<code>.charCodeAt()</code>、<code>String.fromCharCode()</code>、<code>.indexOf()</code>、<code>.replace(X, Y)</code>（這裡的 X 可以寫正規表達式）、<code>.split()</code>、<code>.trim()</code>  </li><li>陣列：<br><code>.join()</code>、<code>.map()</code>、<code>.filter()</code>、<code>.slice()</code>、<code>.splice(位置， 0 或 1，&#39;內容&#39;)</code>、<code>.sort()</code>（可加入比較用的 function）<br>瞭解內建函式回傳的型態</li></ul><p>關於 immutable、課程中提到的浮點數誤差問題（<a href="http://blog.dcview.com/article.php?a=VmhQNVY%2BCzo%3D" target="_blank" rel="noopener">使用浮點數最最基本的觀念</a>）以及參數傳遞的問題（<a href="https://blog.techbridge.cc/2018/06/23/javascript-call-by-value-or-reference/" target="_blank" rel="noopener">深入探討 JavaScript 中的參數傳遞</a>）就留到明、後天筆記吧！感覺都要比較長的時間消化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JavaScript-基礎概念&quot;&gt;&lt;a href=&quot;#JavaScript-基礎概念&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 基礎概念&quot;&gt;&lt;/a&gt;JavaScript 基礎概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一定要執行環境：瀏覽器（
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://JAS0NHUANG.github.io/diary/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Jour-J [進度] 複習 JavaScript 基礎 - 1</title>
    <link href="http://JAS0NHUANG.github.io/diary/jour-j-progress/"/>
    <id>http://JAS0NHUANG.github.io/diary/jour-j-progress/</id>
    <published>2020-06-12T14:09:51.000Z</published>
    <updated>2020-06-14T12:26:03.174Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日進度"><a href="#今日進度" class="headerlink" title="今日進度"></a>今日進度</h2><h3 id="交-Week1作業"><a href="#交-Week1作業" class="headerlink" title="交 Week1作業"></a>交 Week1作業</h3><ul><li><input checked="" disabled="" type="checkbox"> 完成 Week1 交作業流程  </li></ul><h3 id="看完-MTR04-程式導師實驗計畫第四期-第二週"><a href="#看完-MTR04-程式導師實驗計畫第四期-第二週" class="headerlink" title="看完 [MTR04] 程式導師實驗計畫第四期 第二週"></a>看完 [MTR04] 程式導師實驗計畫第四期 第二週</h3><ul><li><input checked="" disabled="" type="checkbox"> [MTR04] 程式導師實驗計畫第四期 第二週</li></ul><h3 id="看完-JS101-用-JavaScript-一步步打造程式基礎"><a href="#看完-JS101-用-JavaScript-一步步打造程式基礎" class="headerlink" title="看完 [JS101] 用 JavaScript 一步步打造程式基礎"></a>看完 [JS101] 用 JavaScript 一步步打造程式基礎</h3><ul><li><input disabled="" type="checkbox"> [JS101] 用 JavaScript 一步步打造程式基礎到「綜合練習 Lv1」<br>複習 JavaScript 的基礎。</li></ul><h3 id="寫-week2-作業"><a href="#寫-week2-作業" class="headerlink" title="寫 week2 作業"></a>寫 week2 作業</h3><ul><li><input disabled="" type="checkbox"> 寫 week2 作業 hw1 - hw5<br>在 [ALG101] 課程裡都有入少類似的練習了，應該不會太困難。  </li></ul><p>[JS101] 不知道能不能一天之內看完，就算已經看過無數 JavaScript 入門教學，還是想說完整的把老師的所有影片再看一次，練習都寫一次，再打一次底。而且看影片的時候也發現其實還是有一些東西之前沒有搞清楚的，像是位元運算、物件的性質、參數 、引數與 arguments ……等等，基礎還是不夠紮實。</p><h2 id="明日進度"><a href="#明日進度" class="headerlink" title="明日進度"></a>明日進度</h2><h3 id="將-JS101-沒看完的部分看完"><a href="#將-JS101-沒看完的部分看完" class="headerlink" title="將 [JS101] 沒看完的部分看完"></a>將 [JS101] 沒看完的部分看完</h3><ul><li><input disabled="" type="checkbox"> 看完 [JS101]</li></ul><h3 id="寫完-Week2-作業-hw1-hw5-及挑戰題"><a href="#寫完-Week2-作業-hw1-hw5-及挑戰題" class="headerlink" title="寫完 Week2 作業 hw1 - hw5 及挑戰題"></a>寫完 Week2 作業 hw1 - hw5 及挑戰題</h3><ul><li><input disabled="" type="checkbox"> 完成 week2 hw1 - hw5 及挑戰題</li></ul><h3 id="搞懂超級挑戰題"><a href="#搞懂超級挑戰題" class="headerlink" title="搞懂超級挑戰題"></a>搞懂超級挑戰題</h3><ul><li><input disabled="" type="checkbox"> 搞懂超級挑戰題，確實學會 BFS 到底是在幹什麼</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;今日進度&quot;&gt;&lt;a href=&quot;#今日進度&quot; class=&quot;headerlink&quot; title=&quot;今日進度&quot;&gt;&lt;/a&gt;今日進度&lt;/h2&gt;&lt;h3 id=&quot;交-Week1作業&quot;&gt;&lt;a href=&quot;#交-Week1作業&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="每日進度" scheme="http://JAS0NHUANG.github.io/diary/tags/%E6%AF%8F%E6%97%A5%E9%80%B2%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>J-1 [進度] 第一週進度完成</title>
    <link href="http://JAS0NHUANG.github.io/diary/J-1-progress/"/>
    <id>http://JAS0NHUANG.github.io/diary/J-1-progress/</id>
    <published>2020-06-11T06:56:52.000Z</published>
    <updated>2020-06-14T11:40:25.397Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日進度"><a href="#今日進度" class="headerlink" title="今日進度"></a>今日進度</h2><h3 id="完成-Week1-作業"><a href="#完成-Week1-作業" class="headerlink" title="完成 Week1 作業"></a>完成 Week1 作業</h3><ul><li><input checked="" disabled="" type="checkbox"> 完成 week1 作業以及挑戰題<br>不算是特別的難，比較像是在練習寫作文……<br>覺得自已講解 CLI、Git、前後端差異的時候還是不太順暢，寫出來的東西總覺得缺了點什麼……<br>同學們可以到我的 Repo 給點指教 ，幫我先改改作業。</li></ul><h3 id="看完-CS101-初心者的計概與-coding-火球術指定部分"><a href="#看完-CS101-初心者的計概與-coding-火球術指定部分" class="headerlink" title="看完 [CS101] 初心者的計概與 coding 火球術指定部分"></a>看完 [CS101] 初心者的計概與 coding 火球術指定部分</h3><ul><li><input checked="" disabled="" type="checkbox"> [CS101] 初心者的計概與 coding 火球術： 1、2、4-1、4-2、11</li></ul><h3 id="看完-MTR04-程式導師實驗計畫第四-至-第一週結束"><a href="#看完-MTR04-程式導師實驗計畫第四-至-第一週結束" class="headerlink" title="看完 [MTR04] 程式導師實驗計畫第四 至 第一週結束"></a>看完 [MTR04] 程式導師實驗計畫第四 至 第一週結束</h3><ul><li><input checked="" disabled="" type="checkbox"> [MTR04] 程式導師實驗計畫第四期 至第一週結束<br>計畫簡介、寫作業與交作業流程、心態培養三個部分已經看完，今天把第一週的內容看完。</li></ul><p>筆記、日記晚點會寫在部落格裡。</p><h2 id="明天進度"><a href="#明天進度" class="headerlink" title="明天進度"></a>明天進度</h2><h3 id="看完-JS101-用-JavaScript-一步步打造程式基礎"><a href="#看完-JS101-用-JavaScript-一步步打造程式基礎" class="headerlink" title="看完 [JS101] 用 JavaScript 一步步打造程式基礎"></a>看完 [JS101] 用 JavaScript 一步步打造程式基礎</h3><ul><li><input disabled="" type="checkbox"> [JS101] 用 JavaScript 一步步打造程式基礎到「綜合練習 Lv1」<br>複習 JavaScript 的基礎。之前上完 [ALG101] 就想要把 LIOJ 上面的題目解完，可是最後一題 1053 一直沒有提起勁去把它搞清楚，希望這兩天能把老師講解的方法或是網上找到的解法搞懂，能夠自已試著模仿一次。（自已想出解法大概是不可能了……）</li><li><input disabled="" type="checkbox"> 寫 week2 作業 hw1 - hw5。這些在 [ALG101] 裡面都有不少類似的練習了。</li></ul><h3 id="看完-MTR04-程式導師實驗計畫第四期-第二週"><a href="#看完-MTR04-程式導師實驗計畫第四期-第二週" class="headerlink" title="看完 [MTR04] 程式導師實驗計畫第四期 第二週"></a>看完 [MTR04] 程式導師實驗計畫第四期 第二週</h3><ul><li><input disabled="" type="checkbox"> [MTR04] 程式導師實驗計畫第四期 第二週</li></ul><h2 id="關於進度"><a href="#關於進度" class="headerlink" title="關於進度"></a>關於進度</h2><p>有些同學提到比較，其實課程在時程上都還不算開始，我就先把第一週看完、明天打算看第二週，我自已也覺得會不會讓別人覺得：「他是在趕什麼的？自以為很厲害？」也會怕自已是不是到時候虎頭蛇尾。<br>其實多想無益，想這麼多幹麼？該做什麼去做就對了。大家的起點本來就不一樣，學習能力也不一樣，就算是最爛的一個又怎樣，重點是學習的過程與收獲。而且看到進度比我快的，有需要可以找他幫忙，看到進度比我慢的，也可以去幫忙他們，一起學習不就是有這個好處，倒別讓這個好處變壞處了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;今日進度&quot;&gt;&lt;a href=&quot;#今日進度&quot; class=&quot;headerlink&quot; title=&quot;今日進度&quot;&gt;&lt;/a&gt;今日進度&lt;/h2&gt;&lt;h3 id=&quot;完成-Week1-作業&quot;&gt;&lt;a href=&quot;#完成-Week1-作業&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="每日進度" scheme="http://JAS0NHUANG.github.io/diary/tags/%E6%AF%8F%E6%97%A5%E9%80%B2%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>J-1 [日記] 網頁架構 &amp; 關於比較</title>
    <link href="http://JAS0NHUANG.github.io/diary/J-1-diary/"/>
    <id>http://JAS0NHUANG.github.io/diary/J-1-diary/</id>
    <published>2020-06-11T06:56:45.000Z</published>
    <updated>2020-06-14T11:41:10.016Z</updated>
    
    <content type="html"><![CDATA[<h2 id="網頁架構"><a href="#網頁架構" class="headerlink" title="網頁架構"></a>網頁架構</h2><p>Ruofan(@ruofanwei) 同學推薦的 Whimsical 真的滿好用的，分享我做的一張基礎網路架構圖：<a href="https://whimsical.com/QnPBztP5vx4rwACD8zMDtF" target="_blank" rel="noopener">Basic Web Structure</a><br><img src="/diary/images/Basic_Web_Structure.png" alt="Basic Web Structure"><br>筆記就用這張圖代表吧！<br>然後……老師，您 request 拼錯了……</p><p><code>nslookup</code> 查詢 ip 位址。</p><h2 id="程式基礎概念"><a href="#程式基礎概念" class="headerlink" title="程式基礎概念"></a>程式基礎概念</h2><p>這些在 [ALG101] 先別急著寫 leetcode 都有一些概念了，附上一些當時的筆記：<a href="https://jas0nhuang.github.io/2020/04/10/alg101-dont-leetcode-yet-1/">Don’t LeetCode Yet - 1&amp;2 - Think First</a>（也不知道為啥當時就用英文記了，有任何錯誤歡迎指正。）  </p><h2 id="關於比較"><a href="#關於比較" class="headerlink" title="關於比較"></a>關於比較</h2><p>讓我直接的想到道德經裡的一段話,大家可以自已體會體會：   </p><blockquote><p>天下皆知美之爲美，斯惡已；皆知善之爲善，斯不善已。故有無相生，難易相成，長短相較，高下相傾，音聲相和，前後相隨。是以聖人處無爲之事，行不言之教。萬物作焉而不辭，生而不有，爲而不恃，功成而弗居。夫唯弗居，是以不去。  </p></blockquote><p>本來寫了一堆想放在每日進度裡，但是想說不要把那裡當個版用好了，就還是移到自已日記部落格。  </p><p>老子大概也不是說大家就都別比了、大家都來去修行好了（這也是我覺得很多人對道家的誤解，覺得「無為」就是什麼事都不用做了），而是認清「比較」難免，只要做好自已分內的事、成功了不要驕傲、不要自恃，這才是應該有的態度。（這些也只是我自已的看法，不代表老子真正的看法……）<br>大家都是有想要跟胡立學習的地方才來到這裡，一百多個人起點也都不一樣，我昨天看了一下胡立講切版的影片，他也知道自已可能在切版上還有需要精進的地方，甚至有很多切版經驗的學員都可以做的「比」他好，其實這種比較就是一種學習的動力。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;網頁架構&quot;&gt;&lt;a href=&quot;#網頁架構&quot; class=&quot;headerlink&quot; title=&quot;網頁架構&quot;&gt;&lt;/a&gt;網頁架構&lt;/h2&gt;&lt;p&gt;Ruofan(@ruofanwei) 同學推薦的 Whimsical 真的滿好用的，分享我做的一張基礎網路架構圖：&lt;a hr
      
    
    </summary>
    
    
      <category term="日記" scheme="http://JAS0NHUANG.github.io/diary/tags/%E6%97%A5%E8%A8%98/"/>
    
      <category term="基礎概念" scheme="http://JAS0NHUANG.github.io/diary/tags/%E5%9F%BA%E7%A4%8E%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>J-2 [日記] 命令列 &amp; Bash Script</title>
    <link href="http://JAS0NHUANG.github.io/diary/J-2-diary-2/"/>
    <id>http://JAS0NHUANG.github.io/diary/J-2-diary-2/</id>
    <published>2020-06-11T00:10:11.000Z</published>
    <updated>2020-06-12T06:58:20.761Z</updated>
    
    <content type="html"><![CDATA[<h2 id="zsh-好用"><a href="#zsh-好用" class="headerlink" title="zsh 好用"></a>zsh 好用</h2><ol><li>安裝 zsh</li><li>到 <a href="https://www.nerdfonts.com/" target="_blank" rel="noopener">NERD FONTS</a> 下載一個你喜歡的字型。（記得要重新設定一下 terminal 的字型）</li><li>安裝 <a href="https://ohmyz.sh/" target="_blank" rel="noopener">oh-my-zsh</a></li><li>到 .zshrc 檔內將主題換成 agnoster<br>厚厚，然後就有好看好用的命令列啦！<br><img src="/diary/images/zsh.png" alt="zsh"><br>（每個 Terminal 軟體都會有不同的主題設定方式，這裡就不多講。）</li></ol><h2 id="常用指令猜猜看"><a href="#常用指令猜猜看" class="headerlink" title="常用指令猜猜看"></a>常用指令猜猜看</h2><p>流水記錄課程裡介紹的指令，應該都要很熟悉了，不知道的請 Google 或是 man：<br>pwd，ls，cd，man，touch，rm，mkdir，cp</p><h1 id="大推-VIM"><a href="#大推-VIM" class="headerlink" title="大推 VIM"></a>大推 VIM</h1><p>嗯，好吧，我知道想要用這麼麻煩的文字編輯器的人應該沒幾個，而且 VS Code 真的是很好用，還是不要入這個坑才好。<br>但是有興趣的人可以到<a href="https://github.com/JAS0NHUANG/vimfiles" target="_blank" rel="noopener">我的 vimfiles</a> 裡面抓 vimrc 下來玩玩，我自已的感覺是還是在 Linux 上使用比較不會遇到問題。<br><img src="/diary/images/VIM.png" alt="VIM"></p><h2 id="從網路抓東西下來"><a href="#從網路抓東西下來" class="headerlink" title="從網路抓東西下來"></a>從網路抓東西下來</h2><p><code>wget 網址</code> 下載檔案<br><code>curl API網址</code> 用 GET 方法輸出 response，<code>-I</code> 可以顯示出 header 資料。</p><h2 id="redirection-與-pipe"><a href="#redirection-與-pipe" class="headerlink" title="redirection 與 pipe"></a>redirection 與 pipe</h2><p><code>&gt;</code>（覆蓋）或者 <code>&gt;&gt;</code>（新增）<br><code>|</code> 將前面指令之輸出做為後面指令之輸入</p><h2 id="Bash-Script-寫法與常用字串處理指令"><a href="#Bash-Script-寫法與常用字串處理指令" class="headerlink" title="Bash Script 寫法與常用字串處理指令"></a>Bash Script 寫法與常用字串處理指令</h2><h3 id="Bash-Script-基礎"><a href="#Bash-Script-基礎" class="headerlink" title="Bash Script 基礎"></a>Bash Script 基礎</h3><ol><li>讀取參數：<br><code>$1</code> 會讀入執行 Script 時第一個傳入的參數，<code>$2</code> 會讀入第二個，以此類推。</li><li>讀取輸入：<br><code>read VARNAME</code> 會等待使用者輸入，並將輸入的資料傳為 VARNAME 的值。</li><li>for 迴圈：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i in &#96;seq 1 $X&#96;</span><br><span class="line">do</span><br><span class="line">  動作</span><br><span class="line">done</span><br></pre></td></tr></table></figure>從 1 重覆執行「動作」$X 次<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i in &quot;one&quot; &quot;two&quot; &quot;three&quot;</span><br></pre></td></tr></table></figure>對 “one” “two” “three” 三個字串各執行一次，執行時 i 的值會分別為 “one” “two” “three”</li><li>if 判斷式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if [ &quot;$i&quot; &#x3D; &#39;&quot;blog&quot;&#39; ]</span><br><span class="line">then</span><br><span class="line">  動作 1</span><br><span class="line">else</span><br><span class="line">  動作 2</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li>變數宣告<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VARNAME&#x3D;VALUE</span><br></pre></td></tr></table></figure>記得這裡等號前後都不可以有空格<br>想要把一段指令輸出的結果傳入的話，可以這樣寫：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VARNAME&#x3D;$(一串會輸出結果的指令)</span><br></pre></td></tr></table></figure></li></ol><h3 id="字串處理"><a href="#字串處理" class="headerlink" title="字串處理"></a>字串處理</h3><ol><li>grep - print lines matching a pattern<br><code>grep &#39;&quot;name&quot;&#39;</code> 以 “name” 字串搜尋、<code>grep $i</code> 以 i 的值搜尋、<code>grep &#39;word1\|word2\|word3&#39;</code> 以三組不同文字搜尋（只要找到其中一項就輸出）</li><li>cut - remove sections from each line of files<br><code>cut -d &quot;:&quot; -f X-Y</code> 以「:」為分隔項目的符號，保留第 X 到第 Y 項的內容。<br>例：<code>blog: http://github.com/</code> 這個字串經過 <code>cut -d &quot;:&quot; -f 2-3</code> 處理的結果就會是 <code>https://github.com/</code></li><li>sed - stream editor for filtering and transforming text<br><code>sed &#39;s/XXX/YYY/g&#39;</code> 會把某字串或文件裡的所有 XXX 都替換為 YYY</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;zsh-好用&quot;&gt;&lt;a href=&quot;#zsh-好用&quot; class=&quot;headerlink&quot; title=&quot;zsh 好用&quot;&gt;&lt;/a&gt;zsh 好用&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;安裝 zsh&lt;/li&gt;
&lt;li&gt;到 &lt;a href=&quot;https://www.nerdfonts
      
    
    </summary>
    
    
      <category term="CLI" scheme="http://JAS0NHUANG.github.io/diary/tags/CLI/"/>
    
      <category term="Vim" scheme="http://JAS0NHUANG.github.io/diary/tags/Vim/"/>
    
      <category term="Bash Script" scheme="http://JAS0NHUANG.github.io/diary/tags/Bash-Script/"/>
    
  </entry>
  
  <entry>
    <title>J-2 [日記] Git &amp; 其它</title>
    <link href="http://JAS0NHUANG.github.io/diary/J-2-diary-1/"/>
    <id>http://JAS0NHUANG.github.io/diary/J-2-diary-1/</id>
    <published>2020-06-11T00:10:07.000Z</published>
    <updated>2020-06-12T06:57:43.522Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git-「稍」進階使用"><a href="#Git-「稍」進階使用" class="headerlink" title="Git 「稍」進階使用"></a>Git 「稍」進階使用</h2><h3 id="分支、合併與衝突"><a href="#分支、合併與衝突" class="headerlink" title="分支、合併與衝突"></a>分支、合併與衝突</h3><p>[GIT101] Git 超新手入門筆記</p><p>同理以資料夾實作 commit，試著以資料夾方式實作 branch。<br>每個 branch 都是包含很多 commit 資料夾的資料夾，好饒舌！<br>分支常用指令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch -v</span><br><span class="line">git branch -d BRANCHNAME</span><br></pre></td></tr></table></figure><p>在各分支、提交之間切換</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout BRANCHNAME</span><br></pre></td></tr></table></figure><p>合併</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git merge BRANCHNAME</span><br></pre></td></tr></table></figure><p>將 BRANCHNAME 這個分支合併到現在所在的分支上。<br>git merge 遇到衝突時可以在 git status 裡看到那些檔案有衝突，Git 會在檔案內進行標註：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">SOME CONTENT</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">SOME OTHER CONTENT</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; BRANCHNAME</span><br></pre></td></tr></table></figure><p>在 <code>&gt;&gt;&gt;&gt;&gt;&gt;</code> 與 <code>&gt;&gt;&gt;&gt;&gt;&gt;</code> 之間的部分就是有衝突需要修改的部分，改好之後就可以再次提交了。</p><h3 id="Git-GitHub-遠端協作"><a href="#Git-GitHub-遠端協作" class="headerlink" title="Git / GitHub 遠端協作"></a>Git / GitHub 遠端協作</h3><p><a href="https://jas0nhuang.github.io/2016/02/23/monkey-learning-git-2-basic-remote/">猴子學 git (二) 基礎遠端操作</a><br>其實 GitHub 真的蠻貼心的，很多操作需要的指令都幫我們寫好了，只要複製貼上就好……<br>大部分的指令像是 push、pull……之前都蠻常使用的，也在之前部落格的文章裡記錄過了，這裡只有 fork 之前比較少用到，它的功能就是把別人的程式庫「分叉」一分到自已的程式庫裡，這樣就可以在自已的 GitHub 帳號裡修改這個程式庫了。<br>還有 GitHub 上 Pull request 這個功能也是第一次真的學到（這裡我也是覺得這個 Pull request 命名的很爛，從字面上看起來很容易混淆，有時候甚至有一點我要向別人 Pull 東西的感覺，其實是要 Push 給他們阿！可能新手太嫩參不透，還忘高人指點迷津），總之，這個功能就是要向別人提議把自已的修改加入他的程式裡面。<br><a href="https://guides.github.com/introduction/flow/" target="_blank" rel="noopener">GitHub Flow</a> 具體的以圖像表式 GitHub 上的協作流程，清楚明瞭。<br>其實這個協作的流程就是課程裡交作業的流程，詳情請見 <a href="https://github.com/Lidemy/mentor-program-4th-JAS0NHUANG/blob/master/homeworks/week1/hw1.md" target="_blank" rel="noopener">week1/hw1</a><br>選擇用 GitHub、GitLab 還是 Bitbucket？<br>GitLab 上的 Pull request 叫作 Merge request 感覺就好懂多了，(要求合併，多清楚阿！）</p><h3 id="人難免要反悔"><a href="#人難免要反悔" class="headerlink" title="人難免要反悔"></a>人難免要反悔</h3><ol><li>想要改 commit message：<code>git commit --amend</code>（查個單字…<a href="https://dictionary.cambridge.org/zht/%E8%A9%9E%E5%85%B8/%E8%8B%B1%E8%AA%9E/amend" target="_blank" rel="noopener">amend</a>）。但是如果已經 push 到遠端的話就沒辦法改了。</li><li>我不要 commit 了：<code>git reset head^</code> 可以帶著 master 分支的指標回到上一個 commit，就好像最後一個 commit 沒有發生過一樣。這裡可以看一下 Pro Git 裡面關於 checkout 與<br>reset 的內容：<a href="https://git-scm.com/book/en/v2/Git-Tools-Reset-Demystified" target="_blank" rel="noopener">7.7 Git Tools - Reset Demystified</a></li><li>還沒 commit 但我改太爛不改了：可以用 <code>git status</code> 看個提示，<code>git checkout -- &lt;file&gt;</code> 就可以把對那個檔案進行的修改復原了。</li><li>分支名取太爛，我要換：<code>git branch -m 新名字</code>，如果瞭解 Git 底層運作的話，其實還可以直接修改 .git/refs/heads/ 資料夾裡想要修改的分支檔名，然後如果現在的 HEAD 是指向分支檔名被修改的分支的話，就要再到 HEAD 檔裡面把它參照的對象改為修改過的分支檔。</li><li>抓個遠方的分支來看看： 直接 <code>git checkout 遠方的分支名</code> EASY！</li></ol><h3 id="Git-Hook"><a href="#Git-Hook" class="headerlink" title="Git Hook"></a>Git Hook</h3><p>隨事件反應的勾子。<br>再來翻翻 .git/ 資料夾，可以找到一個 hooks 資料夾，裡面放的就是一些 Git hook 的 sample 檔，想要使用任何一個 hook 的話，去掉後面的 .sample 那個勾子就會生效了。而勾子的功能主要就是在 Git 執行某個動作時，也同時執行某個 hook 裡面要求的動做，像是在 commit 前做檢查……等等。<br>在 mentor-program-4th-JAS0NHUANG 的程式庫裡面，就可以找到一些 Hooks 的應用，例如 pre-commit 會運行 <code>husky</code> 以進行程式碼檢查。</p><h3 id="Learn-Git-Branching-真的很好玩"><a href="#Learn-Git-Branching-真的很好玩" class="headerlink" title="Learn Git Branching 真的很好玩"></a>Learn Git Branching 真的很好玩</h3><p>之後再慢慢玩吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Git-「稍」進階使用&quot;&gt;&lt;a href=&quot;#Git-「稍」進階使用&quot; class=&quot;headerlink&quot; title=&quot;Git 「稍」進階使用&quot;&gt;&lt;/a&gt;Git 「稍」進階使用&lt;/h2&gt;&lt;h3 id=&quot;分支、合併與衝突&quot;&gt;&lt;a href=&quot;#分支、合併與衝突&quot;
      
    
    </summary>
    
    
      <category term="Git" scheme="http://JAS0NHUANG.github.io/diary/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>J-2 [進度] 課前準備</title>
    <link href="http://JAS0NHUANG.github.io/diary/J-2-progress/"/>
    <id>http://JAS0NHUANG.github.io/diary/J-2-progress/</id>
    <published>2020-06-10T13:05:16.000Z</published>
    <updated>2020-06-12T06:58:58.660Z</updated>
    
    <content type="html"><![CDATA[<h2 id="訂定計畫"><a href="#訂定計畫" class="headerlink" title="訂定計畫"></a>訂定計畫</h2><ol><li>Lidemy 學習系統上的每日進度報告於 UTC 24：00 之前完成提交。內容應該只會有每日進度的大綱、概要，細節會寫在日記裡。</li><li>試著在開課前先把第一週內容完成，第一週可以進行第二週進度，先偷跑一點讓之後有比較大的空間喘息，有比較多時間思考較困難的作業。</li><li>其它包括每日進度備份、學習細節以及其它亂記、雜記會寫在<a href="https://jas0nhuang.github.io/diary/">日記部落格</a>，就不在這裡佔公用的篇幅了，而且學習系統裡沒辦法留言回應，感覺就少了一點……嗯……樂趣嗎？！希望日記能維持至少兩天寫一次。</li></ol><ul><li>其它想到再補。</li><li>另外，J-2 是「開始日前兩天」的意思，等於英文的 D-2 ，因為人在法國，名字第一個字母又是 J，就直接用法文的記法了。</li></ul><h2 id="今日進度"><a href="#今日進度" class="headerlink" title="今日進度"></a>今日進度</h2><h3 id="建立日記部落格"><a href="#建立日記部落格" class="headerlink" title="建立日記部落格"></a>建立日記部落格</h3><p>把之前用的 Hexo 部落格重新改裝一下當成日記部落格。<br>因為是小嫩咖自已土炮拼裝出來的東西，很多地方還是沒辦法處理好（像是程式碼的格式、字型，中英文的換行問題，左右兩側的寬度有時候會跑版……），各位大大有什麼意見或是修改的方向都可以指導一下。</p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>為了寫第一週 hw1 把 Git 仔細的重頭學了一遍，然後在 .git/ 資料夾裡面打滾了一陣子，對於 Git 的運作原理算是有比較多一點的瞭解了。<br>有興趣話可以看我前兩天的日記 <a href="/diary/2020/06/08/J-4/">J-4 Git 基礎複習</a>、<a href="/diary/2020/06/09/J-3/">J-3 Git 運作原理</a></p><ul><li><input checked="" disabled="" type="checkbox"> 看完 [GIT101] Git 超新手入門。</li></ul><h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p>為了寫第一週的兩個挑戰題也是重新學了一遍命令列、Bash Script 的寫法。<br>其實平常主要使用的系統就是 Linux（之前有想要改用 Red Hat 但是對嘸蝦米輸入法不太友善，所以目前還是使用 Linux Mint），但是字串處理、寫 Bash Script 其實不太常碰到，就趁這個機會好好學一次，之後大概還是會忘記 XD，至少動手做過會有個基本概念就是了。</p><ul><li><input checked="" disabled="" type="checkbox"> 看完[CMD101] Command Line 超新手入門。</li></ul><h3 id="程式與網路基礎概念"><a href="#程式與網路基礎概念" class="headerlink" title="程式與網路基礎概念"></a>程式與網路基礎概念</h3><ul><li><input disabled="" type="checkbox"> 看一些 [CS101] 初心者的計概與 coding 火球術： 1-1、1-2、4-1、4-2、11 。</li><li><input disabled="" type="checkbox"> 後天嘗試把第一週作業完成。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;訂定計畫&quot;&gt;&lt;a href=&quot;#訂定計畫&quot; class=&quot;headerlink&quot; title=&quot;訂定計畫&quot;&gt;&lt;/a&gt;訂定計畫&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Lidemy 學習系統上的每日進度報告於 UTC 24：00 之前完成提交。內容應該只會有每日進度的大綱、概要，
      
    
    </summary>
    
    
      <category term="進度" scheme="http://JAS0NHUANG.github.io/diary/tags/%E9%80%B2%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>J-3 [日記] Git 運作原理</title>
    <link href="http://JAS0NHUANG.github.io/diary/J-3-diary/"/>
    <id>http://JAS0NHUANG.github.io/diary/J-3-diary/</id>
    <published>2020-06-09T17:03:05.000Z</published>
    <updated>2020-06-12T06:59:12.464Z</updated>
    
    <content type="html"><![CDATA[<p>要瞭解 Git 的詳細運作原理可能要花不少時間，以下只是粗淺的研究。如果內容有任何錯誤還請老師與同學不吝指正。</p><h2 id="Git-的一切都在-git"><a href="#Git-的一切都在-git" class="headerlink" title="Git 的一切都在 .git/"></a>Git 的一切都在 .git/</h2><p>讓我們從頭開始。<br>先建立一個空的資料夾，然後進入這個資料夾。<br>在按下 <code>git init</code> 這個指令之後，git 就會在所在的資料夾內創建一個 .git/ 資料夾，然後整個資料夾裡有任何風吹草動都會被 Git 給嚴密監控，<br>翻一遍 .git 資料夾就可以對 Git 有更深入一點點的瞭解，在 init 之後 .git/ 資料夾初始的內部組織長的像這樣：(只列出我懂的一些內容，以及這個討論主題會提到的資料，並非完整資料夾結構。）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.git</span><br><span class="line">├── HEAD</span><br><span class="line">├── objects&#x2F;</span><br><span class="line">│   ├── info</span><br><span class="line">│   └── pack</span><br><span class="line">└── refs</span><br><span class="line">    ├── heads</span><br><span class="line">    └── tags</span><br></pre></td></tr></table></figure><p>題外話，強力推薦 tree 這個軟體，Linux 上 <code>apt install tree</code> 或 <code>yum install tree</code> 就可以安裝了，Mac 上面 <code>brew install tree</code> 應該也可以，然後執行 <code>tree 資料夾名稱</code> 就可以把想查看的資料夾以樹狀結構表示出來，超好用！</p><h2 id="git-status-與-index"><a href="#git-status-與-index" class="headerlink" title="git status 與 index"></a>git status 與 index</h2><p>資料夾初始化之後，git 就開始運作了，這時候運行 <code>git status</code> 可以查詢目前 git 資料夾的狀態，官方文件 <a href="https://git-scm.com/docs/git-status" target="_blank" rel="noopener">git-status</a> 是這樣寫的：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">顯示：</span><br><span class="line">1. index 檔與目前 HEAD commit 之間的路徑差異。</span><br><span class="line">2. index 檔與目前工作目錄（working tree）的路徑差異。</span><br><span class="line">3. 在工作目錄中沒有被 Git 追蹤的路徑。</span><br></pre></td></tr></table></figure><p>所以，顯然它輸出的資料與 index 這個檔案的內容很有關系，但是初始化 Git 的時候還不會建立 index 檔，要在第一次執行 <code>git add</code> 之後才會被建立。</p><p>讓我們建立一個檔案 X.file 並且加入一些內容。接著執行 <code>git add</code> ，現在就可以 <code>vim .git/index</code> 查看 index 檔案的內容，可以發現與 <code>git status</code> 傳給我們看的內容幾乎一模一樣。</p><p>在第一次建立 index 檔之後：</p><ol><li>只要資料夾內有新增的檔案就會被記入 index 檔 Untracked 這個區塊。</li><li>已存在的檔案如果有變動則會被記入 index 檔 Unstaged 這個區塊。</li><li>執行 <code>git add</code> 之後該檔案會被記入 Staged 區塊。</li><li><code>git commit</code> 之後，Staged 區塊的記錄就會被清空。</li></ol><p>至於 add 與 commit 位底是在幹什麼？我們下面聊聊。</p><h2 id="add-與-commit-到底幹了什麼事"><a href="#add-與-commit-到底幹了什麼事" class="headerlink" title="add 與 commit 到底幹了什麼事"></a>add 與 commit 到底幹了什麼事</h2><h3 id="把檔案加（add）到-Git-裡"><a href="#把檔案加（add）到-Git-裡" class="headerlink" title="把檔案加（add）到 Git 裡"></a>把檔案加（add）到 Git 裡</h3><p>當我們執行 <code>git add</code> ，Git 會被通知要開始工作了：</p><ol><li>創建一個 blob 物件（這個字真的蠻不知所云的，一個水滴？一團東西？一個胖子？拜託知道為什麼要這麼取名的人提點我一下……後來查了一下資料，發現它應該是 <a href="https://fr.wikipedia.org/wiki/Binary_large_object" target="_blank" rel="noopener">Binary large object</a> 的縮寫），其實可以當成 Git 幫我們建立了一個檔案備份，給他一個雜湊值（SHA-1）然後存到 .git/object/ 資料夾裡面。</li><li>修改 .git/index 檔，將加入的檔案記入 Staged 區塊。</li></ol><p>這時 .git/ 資料夾結構會變成：（比初始狀態多了 index 檔以及 object/eX/9dXXXX 這兩個檔案。）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.git</span><br><span class="line">├── HEAD</span><br><span class="line">├── index</span><br><span class="line">├── objects&#x2F;</span><br><span class="line">│   ├── eX</span><br><span class="line">│   │   └── 9dXXXX （檔案 blob 物件）</span><br><span class="line">│   ├── info</span><br><span class="line">│   └── pack</span><br><span class="line">└── refs</span><br><span class="line">    ├── heads</span><br><span class="line">    └── tags</span><br></pre></td></tr></table></figure><h3 id="提交（commit）目前工作的檔案快照"><a href="#提交（commit）目前工作的檔案快照" class="headerlink" title="提交（commit）目前工作的檔案快照"></a>提交（commit）目前工作的檔案快照</h3><p>檔案加入 Git 的控制之下了，這時候我們想要對目前工作的狀態提交一個檔案快照，執行 <code>git commit</code>，Git 又要上工了：</p><ol><li>建立一個最上層資料夾的 tree 物件，指向其下第一層的 blob 以及 tree 物件，下層資料夾以此類推。（就是將每一個存在的資料夾當成一個節點建立一個資料夾的樹狀結構）</li><li>建立一個 commit 物件, 可以把它想像為一個快照連結，裡面會記錄最上層 tree 物件雜湊值，上一個檔案快照（commit）的雜湊值以及其它相關的資料。</li><li>創建/更新 refs/ 資料夾裡相應的參照（reference）檔。</li><li>創建/更新 logs/ 資料夾內相應的檔案，保存提交歷史記錄。</li></ol><p>接續剛剛的 .git/ 資料夾狀態，在提交之後資料夾結構會變成：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.git</span><br><span class="line">├── HEAD</span><br><span class="line">├── index</span><br><span class="line">├── logs</span><br><span class="line">│   ├── HEAD</span><br><span class="line">│   └── refs</span><br><span class="line">│       └── heads</span><br><span class="line">│           └── master</span><br><span class="line">├── objects&#x2F;</span><br><span class="line">│   ├── eX</span><br><span class="line">│   │   └── 9dXXXX （檔案 blob 物件）</span><br><span class="line">│   ├── dX</span><br><span class="line">│   │   └── f1XXXX （資料夾 tree 物件）</span><br><span class="line">│   ├── Xd</span><br><span class="line">│   │   └── 6dXXXX （commit 物件）</span><br><span class="line">│   ├── info</span><br><span class="line">│   └── pack</span><br><span class="line">└── refs</span><br><span class="line">    ├── heads</span><br><span class="line">    │   └── master</span><br><span class="line">    └── tags</span><br></pre></td></tr></table></figure><p>有一件事大家可以玩玩看，就是從上面資料夾結構的變化看來，在還沒有第一次 commit 之前，logs/ 資料夾以及 heads/master 檔案都是不存在的，所以這時候有奇怪的想法也是很正常的！是不是可以把 <code>master</code> 分支變成<code>麥斯特</code>分支？然後帥氣的生出 <code>.git/refs/heads/麥斯特</code> 資料夾？以及相應的 log 檔？</p><p>隨著上面這個問題總算要帶到我這一切 Git 探源之旅的出發點了：分支到底是什麼？</p><h2 id="分支（branch）與誰的頭（HEAD）"><a href="#分支（branch）與誰的頭（HEAD）" class="headerlink" title="分支（branch）與誰的頭（HEAD）"></a>分支（branch）與誰的頭（HEAD）</h2><p>從 Git 盤古開天開始講了那麼多，其實就是為了搞懂 Git 到底是怎麼儲存檔案的。<br>瞭解了之後，我們就可以比較清楚的討論分支到底是什麼，又跟那些檔案有關系。</p><h3 id="只要有-commit-就有分支"><a href="#只要有-commit-就有分支" class="headerlink" title="只要有 commit 就有分支"></a>只要有 commit 就有分支</h3><p>是的，只要在 Git 監控的資料夾裡提交過，分支就會自動被建立，而這個自動被建立的分支就是 master，上面提到 commit 所做的工作第 3 步，就是在建立一個分支指標/連結檔。（.git/refs/heads/master）如果我們不再手動建立分支，那 master 就會是這個程式庫裡面唯一的分支。<br>這個新建的檔案（.git/refs/heads/master）內容也非常簡單，就是最後一個 commit 的雜湊值。</p><p>那這個「預設」分支到底可不可以改名字為「麥斯特」呢？答案是 「Yes I do.」，在還沒初始 commit 之前，地是空虛混沌，淵面黑暗，嗯，反正分支是還沒有實際存在的，唯一可以找到痕跡的地方就是在 HEAD 檔裡面，在我們執行 commit 之後，Git 就會跑去找 HEAD 問他：「嘿！咱們現在是到那個分支了阿？」HEAD 就會默默的把資料吐出來：<code>ref: refs/heads/master</code>，然後 Git 就盡責的去建立 <code>refs/heads/master</code> 這個資料以及相關的 log 檔了，這，就是 master 分支誕生的故事。<br>所以如果今天，我們不想要生成這個 master 分支，而是想要叫他「麥斯特」，其實只要修改預設的 HEAD 檔內容為 <code>ref: refs/heads/麥斯特</code> 就可以了，從此以後你就擁有與眾不同的「麥斯特」分支了。</p><p>扯了這麼一堆，扯出一個 HEAD，這個 HEAD 又是什麼東西了？讓我們先建立一個新的分支再慢慢討論 HEAD 是什麼。</p><h3 id="建立分支"><a href="#建立分支" class="headerlink" title="建立分支"></a>建立分支</h3><p>所以現在我們知道，分支其實就只是一個「參照」檔案，一個在 .git/refs/heads/ 資料夾裡面的指標/連結檔。<br>昨天介紹過 git branch 這個指令了，建立分支就是這麼簡單，執行 <code>git branch 新婚吱</code>，<code>.git/refs/heads/</code> 資料夾裡就會多出一個<code>新婚吱</code>檔案，記錄目前所在 commit 的雜湊值，分支也建立完成啦！</p><p>我們也知道，master 並沒有比其它分支特別，也不是真的什麼 master，只是因為 Git 預設會自動產生，所以就變成幾乎所有 git 程式庫都會有的一個分支，而且為了大家好溝通、好協作，所以最好還是不要把它改成什麼「麥斯特」、「麥當勞」之類的奇怪名字。</p><h3 id="頭在哪人就在哪"><a href="#頭在哪人就在哪" class="headerlink" title="頭在哪人就在哪"></a>頭在哪人就在哪</h3><p>HEAD 這個「頭」 ，記錄的是我們現在所處的位置，預設狀態下它就是指向 <code>refs/heads/master</code>，所以在沒有特別移動的狀態之下，我們的位置就是在 master 這個分支上最新的提交記錄。<br>切換分支的實際運作，就是我們把 HEAD 指向另一個分支，執行 <code>git checkout 新婚吱</code> 就是在切換 HEAD 指向 <code>新婚吱</code>，而這時 HEAD 檔的內容就會被修改為 <code>ref: refs/heads/新婚吱</code>。</p><p>這個「頭」其實還可以有更複雜的運用，還可以讓他指向某個提交變成斷頭狀態……等等，以後再慢慢研究吧！</p><p>看了那麼多網上的教學，還是覺得 Git 官網上的資料講的最仔細，Pro Git 上有關分支介紹（<a href="https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell" target="_blank" rel="noopener">Git Branching - Branches in a Nutshell</a>）的部分有一些圖片解釋 ，整理成 GIF 圖感覺就像這樣：<br><img src="/diary/images/git_branching.gif" alt="git branching"></p><h3 id="python-寫一個查看-object-內容的小程式"><a href="#python-寫一個查看-object-內容的小程式" class="headerlink" title="python 寫一個查看 object 內容的小程式"></a>python 寫一個查看 object 內容的小程式</h3><p>import zlib<br>filename = ‘file/path’<br>compressed_contents = open(filename, ‘rb’).read()<br>decompressed_contents = zlib.decompress(compressed_contents)</p><p><a href="https://matthew-brett.github.io/curious-git/reading_git_objects.html" target="_blank" rel="noopener">Reading git objects</a><br><a href="https://shafiul.github.io/gitbook/1_the_git_object_model.html" target="_blank" rel="noopener">The Git Object Model</a> GOM XD<br><a href="https://www.atlassian.com/git/tutorials/merging-vs-rebasing" target="_blank" rel="noopener">Merging VS Rebase</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;要瞭解 Git 的詳細運作原理可能要花不少時間，以下只是粗淺的研究。如果內容有任何錯誤還請老師與同學不吝指正。&lt;/p&gt;
&lt;h2 id=&quot;Git-的一切都在-git&quot;&gt;&lt;a href=&quot;#Git-的一切都在-git&quot; class=&quot;headerlink&quot; title=&quot;Git
      
    
    </summary>
    
    
      <category term="Git" scheme="http://JAS0NHUANG.github.io/diary/tags/Git/"/>
    
  </entry>
  
</feed>
