<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JAS0NHUANG - Diary</title>
  
  <subtitle>Diary, Daily Progress and Bazzar</subtitle>
  <link href="/diary/atom.xml" rel="self"/>
  
  <link href="http://JAS0NHUANG.github.io/diary/"/>
  <updated>2020-06-12T14:09:51.155Z</updated>
  <id>http://JAS0NHUANG.github.io/diary/</id>
  
  <author>
    <name>JAS0N HUANG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jour-J [進度] 複習 JavaScript 基礎</title>
    <link href="http://JAS0NHUANG.github.io/diary/2020/06/12/jour-j-progress-1/"/>
    <id>http://JAS0NHUANG.github.io/diary/2020/06/12/jour-j-progress-1/</id>
    <published>2020-06-12T14:09:51.000Z</published>
    <updated>2020-06-12T14:09:51.155Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日進度"><a href="#今日進度" class="headerlink" title="今日進度"></a>今日進度</h2><h3 id="交-Week1作業"><a href="#交-Week1作業" class="headerlink" title="交 Week1作業"></a>交 Week1作業</h3><ul><li><input checked="" disabled="" type="checkbox"> 完成 Week1 交作業流程  </li></ul><h3 id="看完-MTR04-程式導師實驗計畫第四期-第二週"><a href="#看完-MTR04-程式導師實驗計畫第四期-第二週" class="headerlink" title="看完 [MTR04] 程式導師實驗計畫第四期 第二週"></a>看完 [MTR04] 程式導師實驗計畫第四期 第二週</h3><ul><li><input checked="" disabled="" type="checkbox"> [MTR04] 程式導師實驗計畫第四期 第二週</li></ul><h3 id="看完-JS101-用-JavaScript-一步步打造程式基礎"><a href="#看完-JS101-用-JavaScript-一步步打造程式基礎" class="headerlink" title="看完 [JS101] 用 JavaScript 一步步打造程式基礎"></a>看完 [JS101] 用 JavaScript 一步步打造程式基礎</h3><ul><li><input disabled="" type="checkbox"> [JS101] 用 JavaScript 一步步打造程式基礎到「綜合練習 Lv1」<br>複習 JavaScript 的基礎。</li></ul><h3 id="寫-week2-作業"><a href="#寫-week2-作業" class="headerlink" title="寫 week2 作業"></a>寫 week2 作業</h3><ul><li><input disabled="" type="checkbox"> 寫 week2 作業 hw1 - hw5<br>在 [ALG101] 課程裡都有入少類似的練習了，應該不會太困難。  </li></ul><p>[JS101] 不知道能不能一天之內看完，就算已經看過無數 JavaScript 入門教學，還是想說完整的把老師的所有影片再看一次，練習都寫一次，再打一次底。而且看影片的時候也發現其實還是有一些東西之前沒有搞清楚的，像是位元運算、物件的性質、參數 、引數與 arguments ……等等，基礎還是不夠紮實。</p><h2 id="明日進度"><a href="#明日進度" class="headerlink" title="明日進度"></a>明日進度</h2><h3 id="將-JS101-沒看完的部分看完"><a href="#將-JS101-沒看完的部分看完" class="headerlink" title="將 [JS101] 沒看完的部分看完"></a>將 [JS101] 沒看完的部分看完</h3><ul><li><input disabled="" type="checkbox"> 看完 [JS101]</li></ul><h3 id="寫完-Week2-作業-hw1-hw5-及挑戰題"><a href="#寫完-Week2-作業-hw1-hw5-及挑戰題" class="headerlink" title="寫完 Week2 作業 hw1 - hw5 及挑戰題"></a>寫完 Week2 作業 hw1 - hw5 及挑戰題</h3><ul><li><input disabled="" type="checkbox"> 完成 week2 hw1 - hw5 及挑戰題</li></ul><h3 id="搞懂超級挑戰題"><a href="#搞懂超級挑戰題" class="headerlink" title="搞懂超級挑戰題"></a>搞懂超級挑戰題</h3><ul><li><input disabled="" type="checkbox"> 搞懂超級挑戰題，確實學會 BFS 到底是在幹什麼</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;今日進度&quot;&gt;&lt;a href=&quot;#今日進度&quot; class=&quot;headerlink&quot; title=&quot;今日進度&quot;&gt;&lt;/a&gt;今日進度&lt;/h2&gt;&lt;h3 id=&quot;交-Week1作業&quot;&gt;&lt;a href=&quot;#交-Week1作業&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="每日進度" scheme="http://JAS0NHUANG.github.io/diary/tags/%E6%AF%8F%E6%97%A5%E9%80%B2%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>Jour-J-progress</title>
    <link href="http://JAS0NHUANG.github.io/diary/2020/06/12/jour-j-progress/"/>
    <id>http://JAS0NHUANG.github.io/diary/2020/06/12/jour-j-progress/</id>
    <published>2020-06-12T14:07:53.000Z</published>
    <updated>2020-06-12T14:07:53.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日進度"><a href="#今日進度" class="headerlink" title="今日進度"></a>今日進度</h2><h3 id="交-Week1作業"><a href="#交-Week1作業" class="headerlink" title="交 Week1作業"></a>交 Week1作業</h3><ul><li><input checked="" disabled="" type="checkbox"> 完成 Week1 交作業流程  </li></ul><h3 id="看完-MTR04-程式導師實驗計畫第四期-第二週"><a href="#看完-MTR04-程式導師實驗計畫第四期-第二週" class="headerlink" title="看完 [MTR04] 程式導師實驗計畫第四期 第二週"></a>看完 [MTR04] 程式導師實驗計畫第四期 第二週</h3><ul><li><input checked="" disabled="" type="checkbox"> [MTR04] 程式導師實驗計畫第四期 第二週</li></ul><h3 id="看完-JS101-用-JavaScript-一步步打造程式基礎"><a href="#看完-JS101-用-JavaScript-一步步打造程式基礎" class="headerlink" title="看完 [JS101] 用 JavaScript 一步步打造程式基礎"></a>看完 [JS101] 用 JavaScript 一步步打造程式基礎</h3><ul><li><input disabled="" type="checkbox"> <p>[JS101] 用 JavaScript 一步步打造程式基礎到「綜合練習 Lv1」<br>複習 JavaScript 的基礎。</p></li><li><input disabled="" type="checkbox"> <p>寫 week2 作業 hw1 - hw5。這些在 [ALG101] 裡面都有不少類似的練習了。  </p></li><li><p>[JS101] 大概沒辦法一天之內看完，就算已經看過無數 JavaScript 入門的教學，還是想說完整的把老師的所有影片再看一次，再打一次底。  </p></li></ul><h2 id="明日進度"><a href="#明日進度" class="headerlink" title="明日進度"></a>明日進度</h2><h3 id="將-JS101-沒看完的部分看完"><a href="#將-JS101-沒看完的部分看完" class="headerlink" title="將 [JS101] 沒看完的部分看完"></a>將 [JS101] 沒看完的部分看完</h3><ul><li><input disabled="" type="checkbox"> 看完 [JS101]</li></ul><h3 id="寫完-Week2-作業-hw1-hw5-及挑戰題"><a href="#寫完-Week2-作業-hw1-hw5-及挑戰題" class="headerlink" title="寫完 Week2 作業 hw1 - hw5 及挑戰題"></a>寫完 Week2 作業 hw1 - hw5 及挑戰題</h3><ul><li><input disabled="" type="checkbox"> 完成 week2 hw1 - hw5 及挑戰題</li></ul><h3 id="搞懂超級挑戰題"><a href="#搞懂超級挑戰題" class="headerlink" title="搞懂超級挑戰題"></a>搞懂超級挑戰題</h3><ul><li><input disabled="" type="checkbox"> 搞懂超級挑戰題，確實學會 BFS 到底是在幹什麼</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;今日進度&quot;&gt;&lt;a href=&quot;#今日進度&quot; class=&quot;headerlink&quot; title=&quot;今日進度&quot;&gt;&lt;/a&gt;今日進度&lt;/h2&gt;&lt;h3 id=&quot;交-Week1作業&quot;&gt;&lt;a href=&quot;#交-Week1作業&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="每日進度" scheme="http://JAS0NHUANG.github.io/diary/tags/%E6%AF%8F%E6%97%A5%E9%80%B2%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>J-1 [進度] 第一週進度完成</title>
    <link href="http://JAS0NHUANG.github.io/diary/2020/06/12/J-1-progress/"/>
    <id>http://JAS0NHUANG.github.io/diary/2020/06/12/J-1-progress/</id>
    <published>2020-06-12T06:56:52.000Z</published>
    <updated>2020-06-12T06:56:52.475Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日進度"><a href="#今日進度" class="headerlink" title="今日進度"></a>今日進度</h2><h3 id="完成-Week1-作業"><a href="#完成-Week1-作業" class="headerlink" title="完成 Week1 作業"></a>完成 Week1 作業</h3><ul><li><input checked="" disabled="" type="checkbox"> 完成 week1 作業以及挑戰題<br>不算是特別的難，比較像是在練習寫作文……<br>覺得自已講解 CLI、Git、前後端差異的時候還是不太順暢，寫出來的東西總覺得缺了點什麼……<br>同學們可以到我的 Repo 給點指教 ，幫我先改改作業。</li></ul><h3 id="看完-CS101-初心者的計概與-coding-火球術指定部分"><a href="#看完-CS101-初心者的計概與-coding-火球術指定部分" class="headerlink" title="看完 [CS101] 初心者的計概與 coding 火球術指定部分"></a>看完 [CS101] 初心者的計概與 coding 火球術指定部分</h3><ul><li><input checked="" disabled="" type="checkbox"> [CS101] 初心者的計概與 coding 火球術： 1、2、4-1、4-2、11</li></ul><h3 id="看完-MTR04-程式導師實驗計畫第四-至-第一週結束"><a href="#看完-MTR04-程式導師實驗計畫第四-至-第一週結束" class="headerlink" title="看完 [MTR04] 程式導師實驗計畫第四 至 第一週結束"></a>看完 [MTR04] 程式導師實驗計畫第四 至 第一週結束</h3><ul><li><input checked="" disabled="" type="checkbox"> [MTR04] 程式導師實驗計畫第四期 至第一週結束<br>計畫簡介、寫作業與交作業流程、心態培養三個部分已經看完，今天把第一週的內容看完。</li></ul><p>筆記、日記晚點會寫在部落格裡。</p><h2 id="明天進度"><a href="#明天進度" class="headerlink" title="明天進度"></a>明天進度</h2><h3 id="看完-JS101-用-JavaScript-一步步打造程式基礎"><a href="#看完-JS101-用-JavaScript-一步步打造程式基礎" class="headerlink" title="看完 [JS101] 用 JavaScript 一步步打造程式基礎"></a>看完 [JS101] 用 JavaScript 一步步打造程式基礎</h3><ul><li><input disabled="" type="checkbox"> [JS101] 用 JavaScript 一步步打造程式基礎到「綜合練習 Lv1」<br>複習 JavaScript 的基礎。之前上完 [ALG101] 就想要把 LIOJ 上面的題目解完，可是最後一題 1053 一直沒有提起勁去把它搞清楚，希望這兩天能把老師講解的方法或是網上找到的解法搞懂，能夠自已試著模仿一次。（自已想出解法大概是不可能了……）</li><li><input disabled="" type="checkbox"> 寫 week2 作業 hw1 - hw5。這些在 [ALG101] 裡面都有不少類似的練習了。</li></ul><h3 id="看完-MTR04-程式導師實驗計畫第四期-第二週"><a href="#看完-MTR04-程式導師實驗計畫第四期-第二週" class="headerlink" title="看完 [MTR04] 程式導師實驗計畫第四期 第二週"></a>看完 [MTR04] 程式導師實驗計畫第四期 第二週</h3><ul><li><input disabled="" type="checkbox"> [MTR04] 程式導師實驗計畫第四期 第二週</li></ul><h2 id="關於進度"><a href="#關於進度" class="headerlink" title="關於進度"></a>關於進度</h2><p>有些同學提到比較，其實課程在時程上都還不算開始，我就先把第一週看完、明天打算看第二週，我自已也覺得會不會讓別人覺得：「他是在趕什麼的？自以為很厲害？」也會怕自已是不是到時候虎頭蛇尾。<br>其實多想無益，想這麼多幹麼？該做什麼去做就對了。大家的起點本來就不一樣，學習能力也不一樣，就算是最爛的一個又怎樣，重點是學習的過程與收獲。而且看到進度比我快的，有需要可以找他幫忙，看到進度比我慢的，也可以去幫忙他們，一起學習不就是有這個好處，倒別讓這個好處變壞處了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;今日進度&quot;&gt;&lt;a href=&quot;#今日進度&quot; class=&quot;headerlink&quot; title=&quot;今日進度&quot;&gt;&lt;/a&gt;今日進度&lt;/h2&gt;&lt;h3 id=&quot;完成-Week1-作業&quot;&gt;&lt;a href=&quot;#完成-Week1-作業&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="每日進度" scheme="http://JAS0NHUANG.github.io/diary/tags/%E6%AF%8F%E6%97%A5%E9%80%B2%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>J-1 [日記] 網頁架構 &amp; 關於比較</title>
    <link href="http://JAS0NHUANG.github.io/diary/2020/06/12/J-1-diary/"/>
    <id>http://JAS0NHUANG.github.io/diary/2020/06/12/J-1-diary/</id>
    <published>2020-06-12T06:56:45.000Z</published>
    <updated>2020-06-12T06:56:45.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="網頁架構"><a href="#網頁架構" class="headerlink" title="網頁架構"></a>網頁架構</h2><p>Ruofan(@ruofanwei) 同學推薦的 Whimsical 真的滿好用的，分享我做的一張基礎網路架構圖：<a href="https://whimsical.com/QnPBztP5vx4rwACD8zMDtF" target="_blank" rel="noopener">Basic Web Structure</a><br><img src="/diary/images/Basic_Web_Structure.png" alt="Basic Web Structure"><br>筆記就用這張圖代表吧！<br>然後……老師，您 request 拼錯了……</p><p><code>nslookup</code> 查詢 ip 位址。</p><h2 id="程式基礎概念"><a href="#程式基礎概念" class="headerlink" title="程式基礎概念"></a>程式基礎概念</h2><p>這些在 [ALG101] 先別急著寫 leetcode 都有一些概念了，附上一些當時的筆記：<a href="https://jas0nhuang.github.io/2020/04/10/alg101-dont-leetcode-yet-1/">Don’t LeetCode Yet - 1&amp;2 - Think First</a>（也不知道為啥當時就用英文記了，有任何錯誤歡迎指正。）  </p><h2 id="關於比較"><a href="#關於比較" class="headerlink" title="關於比較"></a>關於比較</h2><p>讓我直接的想到道德經裡的一段話,大家可以自已體會體會：   </p><blockquote><p>天下皆知美之爲美，斯惡已；皆知善之爲善，斯不善已。故有無相生，難易相成，長短相較，高下相傾，音聲相和，前後相隨。是以聖人處無爲之事，行不言之教。萬物作焉而不辭，生而不有，爲而不恃，功成而弗居。夫唯弗居，是以不去。  </p></blockquote><p>本來寫了一堆想放在每日進度裡，但是想說不要把那裡當個版用好了，就還是移到自已日記部落格。  </p><p>老子大概也不是說大家就都別比了、大家都來去修行好了（這也是我覺得很多人對道家的誤解，覺得「無為」就是什麼事都不用做了），而是認清「比較」難免，只要做好自已分內的事、成功了不要驕傲、不要自恃，這才是應該有的態度。（這些也只是我自已的看法，不代表老子真正的看法……）<br>大家都是有想要跟胡立學習的地方才來到這裡，一百多個人起點也都不一樣，我昨天看了一下胡立講切版的影片，他也知道自已可能在切版上還有需要精進的地方，甚至有很多切版經驗的學員都可以做的「比」他好，其實這種比較就是一種學習的動力。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;網頁架構&quot;&gt;&lt;a href=&quot;#網頁架構&quot; class=&quot;headerlink&quot; title=&quot;網頁架構&quot;&gt;&lt;/a&gt;網頁架構&lt;/h2&gt;&lt;p&gt;Ruofan(@ruofanwei) 同學推薦的 Whimsical 真的滿好用的，分享我做的一張基礎網路架構圖：&lt;a hr
      
    
    </summary>
    
    
      <category term="日記" scheme="http://JAS0NHUANG.github.io/diary/tags/%E6%97%A5%E8%A8%98/"/>
    
      <category term="基礎概念" scheme="http://JAS0NHUANG.github.io/diary/tags/%E5%9F%BA%E7%A4%8E%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>J-2 [日記] 命令列 &amp; Bash Script</title>
    <link href="http://JAS0NHUANG.github.io/diary/2020/06/10/J-2-diary-2/"/>
    <id>http://JAS0NHUANG.github.io/diary/2020/06/10/J-2-diary-2/</id>
    <published>2020-06-11T00:10:11.000Z</published>
    <updated>2020-06-12T06:58:20.761Z</updated>
    
    <content type="html"><![CDATA[<h2 id="zsh-好用"><a href="#zsh-好用" class="headerlink" title="zsh 好用"></a>zsh 好用</h2><ol><li>安裝 zsh</li><li>到 <a href="https://www.nerdfonts.com/" target="_blank" rel="noopener">NERD FONTS</a> 下載一個你喜歡的字型。（記得要重新設定一下 terminal 的字型）</li><li>安裝 <a href="https://ohmyz.sh/" target="_blank" rel="noopener">oh-my-zsh</a></li><li>到 .zshrc 檔內將主題換成 agnoster<br>厚厚，然後就有好看好用的命令列啦！<br><img src="/diary/images/zsh.png" alt="zsh"><br>（每個 Terminal 軟體都會有不同的主題設定方式，這裡就不多講。）</li></ol><h2 id="常用指令猜猜看"><a href="#常用指令猜猜看" class="headerlink" title="常用指令猜猜看"></a>常用指令猜猜看</h2><p>流水記錄課程裡介紹的指令，應該都要很熟悉了，不知道的請 Google 或是 man：<br>pwd，ls，cd，man，touch，rm，mkdir，cp</p><h1 id="大推-VIM"><a href="#大推-VIM" class="headerlink" title="大推 VIM"></a>大推 VIM</h1><p>嗯，好吧，我知道想要用這麼麻煩的文字編輯器的人應該沒幾個，而且 VS Code 真的是很好用，還是不要入這個坑才好。<br>但是有興趣的人可以到<a href="https://github.com/JAS0NHUANG/vimfiles" target="_blank" rel="noopener">我的 vimfiles</a> 裡面抓 vimrc 下來玩玩，我自已的感覺是還是在 Linux 上使用比較不會遇到問題。<br><img src="/diary/images/VIM.png" alt="VIM"></p><h2 id="從網路抓東西下來"><a href="#從網路抓東西下來" class="headerlink" title="從網路抓東西下來"></a>從網路抓東西下來</h2><p><code>wget 網址</code> 下載檔案<br><code>curl API網址</code> 用 GET 方法輸出 response，<code>-I</code> 可以顯示出 header 資料。</p><h2 id="redirection-與-pipe"><a href="#redirection-與-pipe" class="headerlink" title="redirection 與 pipe"></a>redirection 與 pipe</h2><p><code>&gt;</code>（覆蓋）或者 <code>&gt;&gt;</code>（新增）<br><code>|</code> 將前面指令之輸出做為後面指令之輸入</p><h2 id="Bash-Script-寫法與常用字串處理指令"><a href="#Bash-Script-寫法與常用字串處理指令" class="headerlink" title="Bash Script 寫法與常用字串處理指令"></a>Bash Script 寫法與常用字串處理指令</h2><h3 id="Bash-Script-基礎"><a href="#Bash-Script-基礎" class="headerlink" title="Bash Script 基礎"></a>Bash Script 基礎</h3><ol><li>讀取參數：<br><code>$1</code> 會讀入執行 Script 時第一個傳入的參數，<code>$2</code> 會讀入第二個，以此類推。</li><li>讀取輸入：<br><code>read VARNAME</code> 會等待使用者輸入，並將輸入的資料傳為 VARNAME 的值。</li><li>for 迴圈：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in &#96;seq 1 $X&#96;</span><br><span class="line">do</span><br><span class="line">  動作</span><br><span class="line">done</span><br></pre></td></tr></table></figure>從 1 重覆執行「動作」$X 次<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in &quot;one&quot; &quot;two&quot; &quot;three&quot;</span><br></pre></td></tr></table></figure>對 “one” “two” “three” 三個字串各執行一次，執行時 i 的值會分別為 “one” “two” “three”</li><li>if 判斷式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if [ &quot;$i&quot; &#x3D; &#39;&quot;blog&quot;&#39; ]</span><br><span class="line">then</span><br><span class="line">  動作 1</span><br><span class="line">else</span><br><span class="line">  動作 2</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li>變數宣告<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VARNAME&#x3D;VALUE</span><br></pre></td></tr></table></figure>記得這裡等號前後都不可以有空格<br>想要把一段指令輸出的結果傳入的話，可以這樣寫：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VARNAME&#x3D;$(一串會輸出結果的指令)</span><br></pre></td></tr></table></figure></li></ol><h3 id="字串處理"><a href="#字串處理" class="headerlink" title="字串處理"></a>字串處理</h3><ol><li>grep - print lines matching a pattern<br><code>grep &#39;&quot;name&quot;&#39;</code> 以 “name” 字串搜尋、<code>grep $i</code> 以 i 的值搜尋、<code>grep &#39;word1\|word2\|word3&#39;</code> 以三組不同文字搜尋（只要找到其中一項就輸出）</li><li>cut - remove sections from each line of files<br><code>cut -d &quot;:&quot; -f X-Y</code> 以「:」為分隔項目的符號，保留第 X 到第 Y 項的內容。<br>例：<code>blog: http://github.com/</code> 這個字串經過 <code>cut -d &quot;:&quot; -f 2-3</code> 處理的結果就會是 <code>https://github.com/</code></li><li>sed - stream editor for filtering and transforming text<br><code>sed &#39;s/XXX/YYY/g&#39;</code> 會把某字串或文件裡的所有 XXX 都替換為 YYY</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;zsh-好用&quot;&gt;&lt;a href=&quot;#zsh-好用&quot; class=&quot;headerlink&quot; title=&quot;zsh 好用&quot;&gt;&lt;/a&gt;zsh 好用&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;安裝 zsh&lt;/li&gt;
&lt;li&gt;到 &lt;a href=&quot;https://www.nerdfonts
      
    
    </summary>
    
    
      <category term="CLI" scheme="http://JAS0NHUANG.github.io/diary/tags/CLI/"/>
    
      <category term="Vim" scheme="http://JAS0NHUANG.github.io/diary/tags/Vim/"/>
    
      <category term="Bash Script" scheme="http://JAS0NHUANG.github.io/diary/tags/Bash-Script/"/>
    
  </entry>
  
  <entry>
    <title>J-2 [日記] Git &amp; 其它</title>
    <link href="http://JAS0NHUANG.github.io/diary/2020/06/10/J-2-diary-1/"/>
    <id>http://JAS0NHUANG.github.io/diary/2020/06/10/J-2-diary-1/</id>
    <published>2020-06-11T00:10:07.000Z</published>
    <updated>2020-06-12T06:57:43.522Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git-「稍」進階使用"><a href="#Git-「稍」進階使用" class="headerlink" title="Git 「稍」進階使用"></a>Git 「稍」進階使用</h2><h3 id="分支、合併與衝突"><a href="#分支、合併與衝突" class="headerlink" title="分支、合併與衝突"></a>分支、合併與衝突</h3><p>[GIT101] Git 超新手入門筆記</p><p>同理以資料夾實作 commit，試著以資料夾方式實作 branch。<br>每個 branch 都是包含很多 commit 資料夾的資料夾，好饒舌！<br>分支常用指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -v</span><br><span class="line">git branch -d BRANCHNAME</span><br></pre></td></tr></table></figure><p>在各分支、提交之間切換</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout BRANCHNAME</span><br></pre></td></tr></table></figure><p>合併</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge BRANCHNAME</span><br></pre></td></tr></table></figure><p>將 BRANCHNAME 這個分支合併到現在所在的分支上。<br>git merge 遇到衝突時可以在 git status 裡看到那些檔案有衝突，Git 會在檔案內進行標註：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">SOME CONTENT</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">SOME OTHER CONTENT</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; BRANCHNAME</span><br></pre></td></tr></table></figure><p>在 <code>&gt;&gt;&gt;&gt;&gt;&gt;</code> 與 <code>&gt;&gt;&gt;&gt;&gt;&gt;</code> 之間的部分就是有衝突需要修改的部分，改好之後就可以再次提交了。</p><h3 id="Git-GitHub-遠端協作"><a href="#Git-GitHub-遠端協作" class="headerlink" title="Git / GitHub 遠端協作"></a>Git / GitHub 遠端協作</h3><p><a href="https://jas0nhuang.github.io/2016/02/23/monkey-learning-git-2-basic-remote/">猴子學 git (二) 基礎遠端操作</a><br>其實 GitHub 真的蠻貼心的，很多操作需要的指令都幫我們寫好了，只要複製貼上就好……<br>大部分的指令像是 push、pull……之前都蠻常使用的，也在之前部落格的文章裡記錄過了，這裡只有 fork 之前比較少用到，它的功能就是把別人的程式庫「分叉」一分到自已的程式庫裡，這樣就可以在自已的 GitHub 帳號裡修改這個程式庫了。<br>還有 GitHub 上 Pull request 這個功能也是第一次真的學到（這裡我也是覺得這個 Pull request 命名的很爛，從字面上看起來很容易混淆，有時候甚至有一點我要向別人 Pull 東西的感覺，其實是要 Push 給他們阿！可能新手太嫩參不透，還忘高人指點迷津），總之，這個功能就是要向別人提議把自已的修改加入他的程式裡面。<br><a href="https://guides.github.com/introduction/flow/" target="_blank" rel="noopener">GitHub Flow</a> 具體的以圖像表式 GitHub 上的協作流程，清楚明瞭。<br>其實這個協作的流程就是課程裡交作業的流程，詳情請見 <a href="https://github.com/Lidemy/mentor-program-4th-JAS0NHUANG/blob/master/homeworks/week1/hw1.md" target="_blank" rel="noopener">week1/hw1</a><br>選擇用 GitHub、GitLab 還是 Bitbucket？<br>GitLab 上的 Pull request 叫作 Merge request 感覺就好懂多了，(要求合併，多清楚阿！）</p><h3 id="人難免要反悔"><a href="#人難免要反悔" class="headerlink" title="人難免要反悔"></a>人難免要反悔</h3><ol><li>想要改 commit message：<code>git commit --amend</code>（查個單字…<a href="https://dictionary.cambridge.org/zht/%E8%A9%9E%E5%85%B8/%E8%8B%B1%E8%AA%9E/amend" target="_blank" rel="noopener">amend</a>）。但是如果已經 push 到遠端的話就沒辦法改了。</li><li>我不要 commit 了：<code>git reset head^</code> 可以帶著 master 分支的指標回到上一個 commit，就好像最後一個 commit 沒有發生過一樣。這裡可以看一下 Pro Git 裡面關於 checkout 與<br>reset 的內容：<a href="https://git-scm.com/book/en/v2/Git-Tools-Reset-Demystified" target="_blank" rel="noopener">7.7 Git Tools - Reset Demystified</a></li><li>還沒 commit 但我改太爛不改了：可以用 <code>git status</code> 看個提示，<code>git checkout -- &lt;file&gt;</code> 就可以把對那個檔案進行的修改復原了。</li><li>分支名取太爛，我要換：<code>git branch -m 新名字</code>，如果瞭解 Git 底層運作的話，其實還可以直接修改 .git/refs/heads/ 資料夾裡想要修改的分支檔名，然後如果現在的 HEAD 是指向分支檔名被修改的分支的話，就要再到 HEAD 檔裡面把它參照的對象改為修改過的分支檔。</li><li>抓個遠方的分支來看看： 直接 <code>git checkout 遠方的分支名</code> EASY！</li></ol><h3 id="Git-Hook"><a href="#Git-Hook" class="headerlink" title="Git Hook"></a>Git Hook</h3><p>隨事件反應的勾子。<br>再來翻翻 .git/ 資料夾，可以找到一個 hooks 資料夾，裡面放的就是一些 Git hook 的 sample 檔，想要使用任何一個 hook 的話，去掉後面的 .sample 那個勾子就會生效了。而勾子的功能主要就是在 Git 執行某個動作時，也同時執行某個 hook 裡面要求的動做，像是在 commit 前做檢查……等等。<br>在 mentor-program-4th-JAS0NHUANG 的程式庫裡面，就可以找到一些 Hooks 的應用，例如 pre-commit 會運行 <code>husky</code> 以進行程式碼檢查。</p><h3 id="Learn-Git-Branching-真的很好玩"><a href="#Learn-Git-Branching-真的很好玩" class="headerlink" title="Learn Git Branching 真的很好玩"></a>Learn Git Branching 真的很好玩</h3><p>之後再慢慢玩吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Git-「稍」進階使用&quot;&gt;&lt;a href=&quot;#Git-「稍」進階使用&quot; class=&quot;headerlink&quot; title=&quot;Git 「稍」進階使用&quot;&gt;&lt;/a&gt;Git 「稍」進階使用&lt;/h2&gt;&lt;h3 id=&quot;分支、合併與衝突&quot;&gt;&lt;a href=&quot;#分支、合併與衝突&quot;
      
    
    </summary>
    
    
      <category term="Git" scheme="http://JAS0NHUANG.github.io/diary/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>J-2 [進度] 課前準備</title>
    <link href="http://JAS0NHUANG.github.io/diary/2020/06/10/J-2-progress/"/>
    <id>http://JAS0NHUANG.github.io/diary/2020/06/10/J-2-progress/</id>
    <published>2020-06-10T13:05:16.000Z</published>
    <updated>2020-06-12T06:58:58.660Z</updated>
    
    <content type="html"><![CDATA[<h2 id="訂定計畫"><a href="#訂定計畫" class="headerlink" title="訂定計畫"></a>訂定計畫</h2><ol><li>Lidemy 學習系統上的每日進度報告於 UTC 24：00 之前完成提交。內容應該只會有每日進度的大綱、概要，細節會寫在日記裡。</li><li>試著在開課前先把第一週內容完成，第一週可以進行第二週進度，先偷跑一點讓之後有比較大的空間喘息，有比較多時間思考較困難的作業。</li><li>其它包括每日進度備份、學習細節以及其它亂記、雜記會寫在<a href="https://jas0nhuang.github.io/diary/">日記部落格</a>，就不在這裡佔公用的篇幅了，而且學習系統裡沒辦法留言回應，感覺就少了一點……嗯……樂趣嗎？！希望日記能維持至少兩天寫一次。</li></ol><ul><li>其它想到再補。</li><li>另外，J-2 是「開始日前兩天」的意思，等於英文的 D-2 ，因為人在法國，名字第一個字母又是 J，就直接用法文的記法了。</li></ul><h2 id="今日進度"><a href="#今日進度" class="headerlink" title="今日進度"></a>今日進度</h2><h3 id="建立日記部落格"><a href="#建立日記部落格" class="headerlink" title="建立日記部落格"></a>建立日記部落格</h3><p>把之前用的 Hexo 部落格重新改裝一下當成日記部落格。<br>因為是小嫩咖自已土炮拼裝出來的東西，很多地方還是沒辦法處理好（像是程式碼的格式、字型，中英文的換行問題，左右兩側的寬度有時候會跑版……），各位大大有什麼意見或是修改的方向都可以指導一下。</p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>為了寫第一週 hw1 把 Git 仔細的重頭學了一遍，然後在 .git/ 資料夾裡面打滾了一陣子，對於 Git 的運作原理算是有比較多一點的瞭解了。<br>有興趣話可以看我前兩天的日記 <a href="/diary/2020/06/08/J-4/">J-4 Git 基礎複習</a>、<a href="/diary/2020/06/09/J-3/">J-3 Git 運作原理</a></p><ul><li><input checked="" disabled="" type="checkbox"> 看完 [GIT101] Git 超新手入門。</li></ul><h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p>為了寫第一週的兩個挑戰題也是重新學了一遍命令列、Bash Script 的寫法。<br>其實平常主要使用的系統就是 Linux（之前有想要改用 Red Hat 但是對嘸蝦米輸入法不太友善，所以目前還是使用 Linux Mint），但是字串處理、寫 Bash Script 其實不太常碰到，就趁這個機會好好學一次，之後大概還是會忘記 XD，至少動手做過會有個基本概念就是了。</p><ul><li><input checked="" disabled="" type="checkbox"> 看完[CMD101] Command Line 超新手入門。</li></ul><h3 id="程式與網路基礎概念"><a href="#程式與網路基礎概念" class="headerlink" title="程式與網路基礎概念"></a>程式與網路基礎概念</h3><ul><li><input disabled="" type="checkbox"> 看一些 [CS101] 初心者的計概與 coding 火球術： 1-1、1-2、4-1、4-2、11 。</li><li><input disabled="" type="checkbox"> 後天嘗試把第一週作業完成。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;訂定計畫&quot;&gt;&lt;a href=&quot;#訂定計畫&quot; class=&quot;headerlink&quot; title=&quot;訂定計畫&quot;&gt;&lt;/a&gt;訂定計畫&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Lidemy 學習系統上的每日進度報告於 UTC 24：00 之前完成提交。內容應該只會有每日進度的大綱、概要，
      
    
    </summary>
    
    
      <category term="進度" scheme="http://JAS0NHUANG.github.io/diary/tags/%E9%80%B2%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>J-3 [日記] Git 運作原理</title>
    <link href="http://JAS0NHUANG.github.io/diary/2020/06/09/J-3-diary/"/>
    <id>http://JAS0NHUANG.github.io/diary/2020/06/09/J-3-diary/</id>
    <published>2020-06-09T17:03:05.000Z</published>
    <updated>2020-06-12T06:59:12.464Z</updated>
    
    <content type="html"><![CDATA[<p>要瞭解 Git 的詳細運作原理可能要花不少時間，以下只是粗淺的研究。如果內容有任何錯誤還請老師與同學不吝指正。</p><h2 id="Git-的一切都在-git"><a href="#Git-的一切都在-git" class="headerlink" title="Git 的一切都在 .git/"></a>Git 的一切都在 .git/</h2><p>讓我們從頭開始。<br>先建立一個空的資料夾，然後進入這個資料夾。<br>在按下 <code>git init</code> 這個指令之後，git 就會在所在的資料夾內創建一個 .git/ 資料夾，然後整個資料夾裡有任何風吹草動都會被 Git 給嚴密監控，<br>翻一遍 .git 資料夾就可以對 Git 有更深入一點點的瞭解，在 init 之後 .git/ 資料夾初始的內部組織長的像這樣：(只列出我懂的一些內容，以及這個討論主題會提到的資料，並非完整資料夾結構。）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.git</span><br><span class="line">├── HEAD</span><br><span class="line">├── objects&#x2F;</span><br><span class="line">│   ├── info</span><br><span class="line">│   └── pack</span><br><span class="line">└── refs</span><br><span class="line">    ├── heads</span><br><span class="line">    └── tags</span><br></pre></td></tr></table></figure><p>題外話，強力推薦 tree 這個軟體，Linux 上 <code>apt install tree</code> 或 <code>yum install tree</code> 就可以安裝了，Mac 上面 <code>brew install tree</code> 應該也可以，然後執行 <code>tree 資料夾名稱</code> 就可以把想查看的資料夾以樹狀結構表示出來，超好用！</p><h2 id="git-status-與-index"><a href="#git-status-與-index" class="headerlink" title="git status 與 index"></a>git status 與 index</h2><p>資料夾初始化之後，git 就開始運作了，這時候運行 <code>git status</code> 可以查詢目前 git 資料夾的狀態，官方文件 <a href="https://git-scm.com/docs/git-status" target="_blank" rel="noopener">git-status</a> 是這樣寫的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">顯示：</span><br><span class="line">1. index 檔與目前 HEAD commit 之間的路徑差異。</span><br><span class="line">2. index 檔與目前工作目錄（working tree）的路徑差異。</span><br><span class="line">3. 在工作目錄中沒有被 Git 追蹤的路徑。</span><br></pre></td></tr></table></figure><p>所以，顯然它輸出的資料與 index 這個檔案的內容很有關系，但是初始化 Git 的時候還不會建立 index 檔，要在第一次執行 <code>git add</code> 之後才會被建立。</p><p>讓我們建立一個檔案 X.file 並且加入一些內容。接著執行 <code>git add</code> ，現在就可以 <code>vim .git/index</code> 查看 index 檔案的內容，可以發現與 <code>git status</code> 傳給我們看的內容幾乎一模一樣。</p><p>在第一次建立 index 檔之後：</p><ol><li>只要資料夾內有新增的檔案就會被記入 index 檔 Untracked 這個區塊。</li><li>已存在的檔案如果有變動則會被記入 index 檔 Unstaged 這個區塊。</li><li>執行 <code>git add</code> 之後該檔案會被記入 Staged 區塊。</li><li><code>git commit</code> 之後，Staged 區塊的記錄就會被清空。</li></ol><p>至於 add 與 commit 位底是在幹什麼？我們下面聊聊。</p><h2 id="add-與-commit-到底幹了什麼事"><a href="#add-與-commit-到底幹了什麼事" class="headerlink" title="add 與 commit 到底幹了什麼事"></a>add 與 commit 到底幹了什麼事</h2><h3 id="把檔案加（add）到-Git-裡"><a href="#把檔案加（add）到-Git-裡" class="headerlink" title="把檔案加（add）到 Git 裡"></a>把檔案加（add）到 Git 裡</h3><p>當我們執行 <code>git add</code> ，Git 會被通知要開始工作了：</p><ol><li>創建一個 blob 物件（這個字真的蠻不知所云的，一個水滴？一團東西？一個胖子？拜託知道為什麼要這麼取名的人提點我一下……後來查了一下資料，發現它應該是 <a href="https://fr.wikipedia.org/wiki/Binary_large_object" target="_blank" rel="noopener">Binary large object</a> 的縮寫），其實可以當成 Git 幫我們建立了一個檔案備份，給他一個雜湊值（SHA-1）然後存到 .git/object/ 資料夾裡面。</li><li>修改 .git/index 檔，將加入的檔案記入 Staged 區塊。</li></ol><p>這時 .git/ 資料夾結構會變成：（比初始狀態多了 index 檔以及 object/eX/9dXXXX 這兩個檔案。）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.git</span><br><span class="line">├── HEAD</span><br><span class="line">├── index</span><br><span class="line">├── objects&#x2F;</span><br><span class="line">│   ├── eX</span><br><span class="line">│   │   └── 9dXXXX （檔案 blob 物件）</span><br><span class="line">│   ├── info</span><br><span class="line">│   └── pack</span><br><span class="line">└── refs</span><br><span class="line">    ├── heads</span><br><span class="line">    └── tags</span><br></pre></td></tr></table></figure><h3 id="提交（commit）目前工作的檔案快照"><a href="#提交（commit）目前工作的檔案快照" class="headerlink" title="提交（commit）目前工作的檔案快照"></a>提交（commit）目前工作的檔案快照</h3><p>檔案加入 Git 的控制之下了，這時候我們想要對目前工作的狀態提交一個檔案快照，執行 <code>git commit</code>，Git 又要上工了：</p><ol><li>建立一個最上層資料夾的 tree 物件，指向其下第一層的 blob 以及 tree 物件，下層資料夾以此類推。（就是將每一個存在的資料夾當成一個節點建立一個資料夾的樹狀結構）</li><li>建立一個 commit 物件, 可以把它想像為一個快照連結，裡面會記錄最上層 tree 物件雜湊值，上一個檔案快照（commit）的雜湊值以及其它相關的資料。</li><li>創建/更新 refs/ 資料夾裡相應的參照（reference）檔。</li><li>創建/更新 logs/ 資料夾內相應的檔案，保存提交歷史記錄。</li></ol><p>接續剛剛的 .git/ 資料夾狀態，在提交之後資料夾結構會變成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.git</span><br><span class="line">├── HEAD</span><br><span class="line">├── index</span><br><span class="line">├── logs</span><br><span class="line">│   ├── HEAD</span><br><span class="line">│   └── refs</span><br><span class="line">│       └── heads</span><br><span class="line">│           └── master</span><br><span class="line">├── objects&#x2F;</span><br><span class="line">│   ├── eX</span><br><span class="line">│   │   └── 9dXXXX （檔案 blob 物件）</span><br><span class="line">│   ├── dX</span><br><span class="line">│   │   └── f1XXXX （資料夾 tree 物件）</span><br><span class="line">│   ├── Xd</span><br><span class="line">│   │   └── 6dXXXX （commit 物件）</span><br><span class="line">│   ├── info</span><br><span class="line">│   └── pack</span><br><span class="line">└── refs</span><br><span class="line">    ├── heads</span><br><span class="line">    │   └── master</span><br><span class="line">    └── tags</span><br></pre></td></tr></table></figure><p>有一件事大家可以玩玩看，就是從上面資料夾結構的變化看來，在還沒有第一次 commit 之前，logs/ 資料夾以及 heads/master 檔案都是不存在的，所以這時候有奇怪的想法也是很正常的！是不是可以把 <code>master</code> 分支變成<code>麥斯特</code>分支？然後帥氣的生出 <code>.git/refs/heads/麥斯特</code> 資料夾？以及相應的 log 檔？</p><p>隨著上面這個問題總算要帶到我這一切 Git 探源之旅的出發點了：分支到底是什麼？</p><h2 id="分支（branch）與誰的頭（HEAD）"><a href="#分支（branch）與誰的頭（HEAD）" class="headerlink" title="分支（branch）與誰的頭（HEAD）"></a>分支（branch）與誰的頭（HEAD）</h2><p>從 Git 盤古開天開始講了那麼多，其實就是為了搞懂 Git 到底是怎麼儲存檔案的。<br>瞭解了之後，我們就可以比較清楚的討論分支到底是什麼，又跟那些檔案有關系。</p><h3 id="只要有-commit-就有分支"><a href="#只要有-commit-就有分支" class="headerlink" title="只要有 commit 就有分支"></a>只要有 commit 就有分支</h3><p>是的，只要在 Git 監控的資料夾裡提交過，分支就會自動被建立，而這個自動被建立的分支就是 master，上面提到 commit 所做的工作第 3 步，就是在建立一個分支指標/連結檔。（.git/refs/heads/master）如果我們不再手動建立分支，那 master 就會是這個程式庫裡面唯一的分支。<br>這個新建的檔案（.git/refs/heads/master）內容也非常簡單，就是最後一個 commit 的雜湊值。</p><p>那這個「預設」分支到底可不可以改名字為「麥斯特」呢？答案是 「Yes I do.」，在還沒初始 commit 之前，地是空虛混沌，淵面黑暗，嗯，反正分支是還沒有實際存在的，唯一可以找到痕跡的地方就是在 HEAD 檔裡面，在我們執行 commit 之後，Git 就會跑去找 HEAD 問他：「嘿！咱們現在是到那個分支了阿？」HEAD 就會默默的把資料吐出來：<code>ref: refs/heads/master</code>，然後 Git 就盡責的去建立 <code>refs/heads/master</code> 這個資料以及相關的 log 檔了，這，就是 master 分支誕生的故事。<br>所以如果今天，我們不想要生成這個 master 分支，而是想要叫他「麥斯特」，其實只要修改預設的 HEAD 檔內容為 <code>ref: refs/heads/麥斯特</code> 就可以了，從此以後你就擁有與眾不同的「麥斯特」分支了。</p><p>扯了這麼一堆，扯出一個 HEAD，這個 HEAD 又是什麼東西了？讓我們先建立一個新的分支再慢慢討論 HEAD 是什麼。</p><h3 id="建立分支"><a href="#建立分支" class="headerlink" title="建立分支"></a>建立分支</h3><p>所以現在我們知道，分支其實就只是一個「參照」檔案，一個在 .git/refs/heads/ 資料夾裡面的指標/連結檔。<br>昨天介紹過 git branch 這個指令了，建立分支就是這麼簡單，執行 <code>git branch 新婚吱</code>，<code>.git/refs/heads/</code> 資料夾裡就會多出一個<code>新婚吱</code>檔案，記錄目前所在 commit 的雜湊值，分支也建立完成啦！</p><p>我們也知道，master 並沒有比其它分支特別，也不是真的什麼 master，只是因為 Git 預設會自動產生，所以就變成幾乎所有 git 程式庫都會有的一個分支，而且為了大家好溝通、好協作，所以最好還是不要把它改成什麼「麥斯特」、「麥當勞」之類的奇怪名字。</p><h3 id="頭在哪人就在哪"><a href="#頭在哪人就在哪" class="headerlink" title="頭在哪人就在哪"></a>頭在哪人就在哪</h3><p>HEAD 這個「頭」 ，記錄的是我們現在所處的位置，預設狀態下它就是指向 <code>refs/heads/master</code>，所以在沒有特別移動的狀態之下，我們的位置就是在 master 這個分支上最新的提交記錄。<br>切換分支的實際運作，就是我們把 HEAD 指向另一個分支，執行 <code>git checkout 新婚吱</code> 就是在切換 HEAD 指向 <code>新婚吱</code>，而這時 HEAD 檔的內容就會被修改為 <code>ref: refs/heads/新婚吱</code>。</p><p>這個「頭」其實還可以有更複雜的運用，還可以讓他指向某個提交變成斷頭狀態……等等，以後再慢慢研究吧！</p><p>看了那麼多網上的教學，還是覺得 Git 官網上的資料講的最仔細，Pro Git 上有關分支介紹（<a href="https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell" target="_blank" rel="noopener">Git Branching - Branches in a Nutshell</a>）的部分有一些圖片解釋 ，整理成 GIF 圖感覺就像這樣：<br><img src="/diary/images/git_branching.gif" alt="git branching"></p><h3 id="python-寫一個查看-object-內容的小程式"><a href="#python-寫一個查看-object-內容的小程式" class="headerlink" title="python 寫一個查看 object 內容的小程式"></a>python 寫一個查看 object 內容的小程式</h3><p>import zlib<br>filename = ‘file/path’<br>compressed_contents = open(filename, ‘rb’).read()<br>decompressed_contents = zlib.decompress(compressed_contents)</p><p><a href="https://matthew-brett.github.io/curious-git/reading_git_objects.html" target="_blank" rel="noopener">Reading git objects</a><br><a href="https://shafiul.github.io/gitbook/1_the_git_object_model.html" target="_blank" rel="noopener">The Git Object Model</a> GOM XD<br><a href="https://www.atlassian.com/git/tutorials/merging-vs-rebasing" target="_blank" rel="noopener">Merging VS Rebase</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;要瞭解 Git 的詳細運作原理可能要花不少時間，以下只是粗淺的研究。如果內容有任何錯誤還請老師與同學不吝指正。&lt;/p&gt;
&lt;h2 id=&quot;Git-的一切都在-git&quot;&gt;&lt;a href=&quot;#Git-的一切都在-git&quot; class=&quot;headerlink&quot; title=&quot;Git
      
    
    </summary>
    
    
      <category term="Git" scheme="http://JAS0NHUANG.github.io/diary/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>J-4 [日記] Git 基礎複習</title>
    <link href="http://JAS0NHUANG.github.io/diary/2020/06/08/J-4-diary/"/>
    <id>http://JAS0NHUANG.github.io/diary/2020/06/08/J-4-diary/</id>
    <published>2020-06-08T15:03:00.000Z</published>
    <updated>2020-06-12T06:59:20.692Z</updated>
    
    <content type="html"><![CDATA[<p>昨天除了試著把 week1/hw1 完成，也看了一下 week2、week3 的作業，在做 hw1 的時候覺得自已 Git 的基礎還要再複習一下，所以今天就先把 Git 基礎複習一遍。</p><h2 id="版本控制概念"><a href="#版本控制概念" class="headerlink" title="版本控制概念"></a>版本控制概念</h2><ol><li>保存不同版本的檔案</li><li>版本分支（例如新功能分支與除蟲分支)，分支各別完成之後可以合併</li><li>記錄各版本之間的差異</li><li>排除不必被追蹤的檔案</li><li>協作功能</li></ol><h2 id="自建版本控制系統"><a href="#自建版本控制系統" class="headerlink" title="自建版本控制系統"></a>自建版本控制系統</h2><ol><li>每個版本新開資料夾</li><li>將不必被追蹤之檔案移出</li><li>各版本資料夾以亂數命名避免重複/衝突</li><li>建立一個歷史記錄檔，記錄各資料夾之時間順序</li></ol><h2 id="Git-基礎"><a href="#Git-基礎" class="headerlink" title="Git 基礎"></a>Git 基礎</h2><p>其實可以參考我自已之前的筆記：<a href="https://jas0nhuang.github.io/2016/02/22/monkey-learning-git-1-basic-and-locale/">猴子學 git (一) 基本概念與本地端操作</a>，只是有些細節沒有寫到。</p><ul><li>git init 初始化（其實就是在資料夾裡建立一個 .git/ 資料夾，讓 git 可以對整個資料夾的檔案進行版本控制，沒事可以進去看看 .git/ 裡面都存了些什麼東西）</li><li>git status 查詢版本控制狀態</li><li>git add 檔案加入版本控制</li><li>git rm –cached 檔案移除版本控制<br>（tracked、stage、untracked……等狀態可以參考下面這張圖）<img src="https://jas0nhuang.github.io/images/Gitflow.svg" alt="git stats"></li><li>git commit 提交新版本<ul><li>快速方法：git -am “XXXX”</li></ul></li></ul><hr><p>下面這些是我之前比較沒用過的指令：</p><ul><li><p>git log 查看(提交)歷史記錄（可以加 –oneline 只顯示簡短的提交記錄）</p></li><li><p>git checkout 切換提交版本 </p><ul><li>加上 {commit id} 可以進去指定的 commit 版本</li><li>加上 master 可以回到目前最新版本</li></ul></li><li><p>.gitignore 檔案裡可以放入不想加入版本控制的檔名</p></li></ul><h2 id="Git-分支"><a href="#Git-分支" class="headerlink" title="Git 分支"></a>Git 分支</h2><h3 id="為什使用分支"><a href="#為什使用分支" class="headerlink" title="為什使用分支"></a>為什使用分支</h3><p>使用分支的場景其實很容易想像，無論是個人或是團隊專案，想要加上新功能或是修改內容而不影響穩定版本的運作，最好的方式就是開一個分支。</p><h2 id="分支指令"><a href="#分支指令" class="headerlink" title="分支指令"></a>分支指令</h2><p>git branch 不提供參數的話會列出所有分支名稱，並且顯示現在所在分支位置；提供參數「新分支名」則會建立一個新的分支<br>git checkout 加上分支名可以切換到所選分支</p><h3 id="分支的運作原理"><a href="#分支的運作原理" class="headerlink" title="分支的運作原理"></a>分支的運作原理</h3><p>這部分比較複雜，Pro Git 書中有一整個章節在講分支（<a href="https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell" target="_blank" rel="noopener">第三章</a>），可能也要對 Git 底層的運作原理（Pro Git 這本書<a href="https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain" target="_blank" rel="noopener">第十章</a>的內容）有點概念才行。</p><p>今天花了點時間試著把 Git 的運作原理看了一下，明天再戰……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天除了試著把 week1/hw1 完成，也看了一下 week2、week3 的作業，在做 hw1 的時候覺得自已 Git 的基礎還要再複習一下，所以今天就先把 Git 基礎複習一遍。&lt;/p&gt;
&lt;h2 id=&quot;版本控制概念&quot;&gt;&lt;a href=&quot;#版本控制概念&quot; class=
      
    
    </summary>
    
    
      <category term="Git" scheme="http://JAS0NHUANG.github.io/diary/tags/Git/"/>
    
  </entry>
  
</feed>
